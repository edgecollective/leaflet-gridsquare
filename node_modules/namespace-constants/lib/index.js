'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
    separator: ':',
    transform: function transform(v) {
        return v;
    }
};

var constants = function constants() {
    var namespace = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    var constants = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var options = arguments.length <= 2 || arguments[2] === undefined ? defaultOptions : arguments[2];

    if (Array.isArray(namespace)) {
        constants = namespace;
        namespace = '';
    }

    options.separator = options.separator || defaultOptions.separator;
    options.transform = options.transform || defaultOptions.transform;

    // Prevent new properties from being added to it
    return Object.freeze(constants.reduce(function (memo, constant) {
        var transformedConstant = options.transform(constant);
        return _extends({}, memo, _defineProperty({}, transformedConstant, namespace ? '' + namespace + options.separator + transformedConstant : transformedConstant));
    }, {}));
};

module.exports = constants;