'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _lodash = require('lodash.omit');

var _lodash2 = _interopRequireDefault(_lodash);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Interpolate = (_temp = _class = function (_PureComponent) {
    _inherits(Interpolate, _PureComponent);

    function Interpolate() {
        _classCallCheck(this, Interpolate);

        return _possibleConstructorReturn(this, (Interpolate.__proto__ || Object.getPrototypeOf(Interpolate)).apply(this, arguments));
    }

    _createClass(Interpolate, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                parent = _props.parent,
                prefix = _props.prefix,
                suffix = _props.suffix,
                replacement = _props.replacement;

            var REGEXP = new RegExp(prefix + '(.+?)' + suffix);
            var format = this.props.format || this.props.children;

            if (!format || typeof format !== 'string') {
                return _react2.default.createElement('noscript', null);
            }

            var props = (0, _lodash2.default)(this.props, ['parent', 'prefix', 'suffix', 'replacement']);
            var matches = [];
            var children = [];

            // "AAA {{foo}} BBB {{bar}}".split(REGEXP)
            // ["AAA ", "foo", " BBB ", "bar", ""]
            format.split(REGEXP).reduce(function (memo, match, index) {
                var child = null;

                if (index % 2 === 0) {
                    if (match.length === 0) {
                        return memo;
                    }
                    child = match;
                } else if (replacement) {
                    child = replacement[match];
                } else {
                    child = _this2.props[match];
                    matches.push(match);
                }

                memo.push(child);

                return memo;
            }, children);

            props = (0, _lodash2.default)(props, matches);

            return _react2.default.createElement.apply(this, [parent, props].concat(children));
        }
    }]);

    return Interpolate;
}(_react.PureComponent), _class.propTypes = {
    format: _propTypes2.default.string,
    parent: _propTypes2.default.string,
    prefix: _propTypes2.default.string,
    suffix: _propTypes2.default.string,
    replacement: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object])
}, _class.defaultProps = {
    parent: 'span',
    prefix: '{{',
    suffix: '}}'
}, _temp);
exports.default = Interpolate;