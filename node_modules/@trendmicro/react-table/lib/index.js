/*! react-table v1.0.1-alpha.2 | (c) 2018 Trend Micro Inc. | MIT | https://github.com/trendmicro-frontend/react-table */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"table-wrapper":"table---table-wrapper---1t2D3","tableWrapper":"table---table-wrapper---1t2D3","table-area":"table---table-area---KA_N2","tableArea":"table---table-area---KA_N2","table":"table---table---2aBqd","thead":"table---thead---1v6TQ","tr":"table---tr---3XEXR","th":"table---th---2-0kV","tbody":"table---tbody---3q9RK","tfoot":"table---tfoot---23ZpN","td":"table---td---EVNU5","th-content":"table---th-content---1Yr_t","thContent":"table---th-content---1Yr_t","td-content":"table---td-content---3XCoJ","tdContent":"table---td-content---3XCoJ","tr-expand":"table---tr-expand---sEKPQ","trExpand":"table---tr-expand---sEKPQ","table-auto-fit":"table---table-auto-fit---2I_0P","tableAutoFit":"table---table-auto-fit---2I_0P","table-bordered":"table---table-bordered---1cbV4","tableBordered":"table---table-bordered---1cbV4","sortable-highlight":"table---sortable-highlight---12H40","sortableHighlight":"table---sortable-highlight---12H40","sortable":"table---sortable---2wlpR","order-asc":"table---order-asc---30316","orderAsc":"table---order-asc---30316","order-desc":"table---order-desc---X7MWr","orderDesc":"table---order-desc---X7MWr","table-fixed-header":"table---table-fixed-header---3bjFf","tableFixedHeader":"table---table-fixed-header---3bjFf","table-fixed-left-container":"table---table-fixed-left-container---OojVI","tableFixedLeftContainer":"table---table-fixed-left-container---OojVI","table-hover":"table---table-hover---3yCb6","tableHover":"table---table-hover---3yCb6","tr-hover":"table---tr-hover---1oNCV","trHover":"table---tr-hover---1oNCV","td-link":"table---td-link---2eKF1","tdLink":"table---td-link---2eKF1","table-minimalism":"table---table-minimalism---1Tk6v","tableMinimalism":"table---table-minimalism---1Tk6v","table-no-data":"table---table-no-data---2nuKv","tableNoData":"table---table-no-data---2nuKv","table-placeholder":"table---table-placeholder---3xuV7","tablePlaceholder":"table---table-placeholder---3xuV7","table-no-data-loader":"table---table-no-data-loader---35BPN","tableNoDataLoader":"table---table-no-data-loader---35BPN","loader-overlay":"table---loader-overlay---IQP-L","loaderOverlay":"table---loader-overlay---IQP-L","loader":"table---loader---3Kv7h","loader-small":"table---loader-small---37wpB","loaderSmall":"table---loader-small---37wpB","loader-large":"table---loader-large---2W2Dw","loaderLarge":"table---loader-large---2W2Dw","no-header":"table---no-header---3oIYg","noHeader":"table---no-header---3oIYg","spinner":"table---spinner---2cR6i"};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("classnames");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("mini-store");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEqual");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Table = __webpack_require__(7);

var _Table2 = _interopRequireDefault(_Table);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _Table2.default;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _classnames = __webpack_require__(2);

var _classnames2 = _interopRequireDefault(_classnames);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _miniStore = __webpack_require__(4);

var _isEqual = __webpack_require__(5);

var _isEqual2 = _interopRequireDefault(_isEqual);

var _propTypes = __webpack_require__(3);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _elementResizeDetector = __webpack_require__(8);

var _elementResizeDetector2 = _interopRequireDefault(_elementResizeDetector);

var _lodash = __webpack_require__(9);

var _lodash2 = _interopRequireDefault(_lodash);

var _helper = __webpack_require__(10);

var _helper2 = _interopRequireDefault(_helper);

var _uniqueid = __webpack_require__(11);

var _uniqueid2 = _interopRequireDefault(_uniqueid);

var _index = __webpack_require__(1);

var _index2 = _interopRequireDefault(_index);

var _TableTemplate = __webpack_require__(12);

var _TableTemplate2 = _interopRequireDefault(_TableTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Table = (_temp = _class = function (_PureComponent) {
    _inherits(Table, _PureComponent);

    function Table(props) {
        _classCallCheck(this, Table);

        var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));

        _this.actions = {
            detectScrollTarget: function detectScrollTarget(e) {
                if (_this.scrollTarget !== e.currentTarget) {
                    _this.scrollTarget = e.currentTarget;
                }
            },
            handleBodyScroll: function handleBodyScroll(e) {
                if (e.target !== _this.scrollTarget) {
                    return;
                }
                // scrollTop is for scrolling main table and fixed table at the same time.
                if (_this.isAnyColumnsLeftFixed()) {
                    _this.setState({
                        scrollTop: e.target.scrollTop
                    });
                }
            },
            handleRowHover: function handleRowHover(isHover, key) {
                var hoverable = _this.props.hoverable;
                // hoveredRowKey is only for setting hover style to columns and fixed left columns at the same time.

                if (_this.isAnyColumnsLeftFixed() && hoverable) {
                    _this.setState({
                        hoveredRowKey: isHover ? key : null
                    });
                }
            },
            setTableSize: function setTableSize() {
                if (_this.tableWrapper) {
                    var maxHeight = _this.props.maxHeight;

                    var tableTopBorder = _helper2.default.getElementStyle(_this.tableWrapper, 'border-top-width');
                    var tableBottomBorder = _helper2.default.getElementStyle(_this.tableWrapper, 'border-bottom-width');
                    var headerHeight = _this.title ? _this.title.getBoundingClientRect().height : 0;
                    var footerHeight = _this.foot ? _this.foot.getBoundingClientRect().height : 0;
                    var tableHeight = maxHeight - headerHeight - footerHeight - parseInt(tableTopBorder, 10) - parseInt(tableBottomBorder, 10);
                    _this.actions.sizeTable(tableHeight);
                }
            },
            sizeTable: function sizeTable(tablehHight) {
                if (_this.mainTable) {
                    _this.actions.sizeMainTable();
                    if (tablehHight) {
                        var headerHeight = _this.mainTable.tableHeader ? _this.mainTable.tableHeader.header.getBoundingClientRect().height : 0;
                        var bodyHeight = tablehHight ? tablehHight - headerHeight : 0;
                        _this.mainTable.tableBody.body.style['max-height'] = bodyHeight + 'px';
                    }
                    if (_this.tableFixedLeft) {
                        _this.actions.sizeFixedTable();
                    }
                }
            },
            sizeMainTable: function sizeMainTable() {
                var _this$actions = _this.actions,
                    getMainTableCellWidth = _this$actions.getMainTableCellWidth,
                    getMainTableRowHeight = _this$actions.getMainTableRowHeight,
                    setMainTableBodyCellWidth = _this$actions.setMainTableBodyCellWidth,
                    setMainTableBodyCellHeight = _this$actions.setMainTableBodyCellHeight,
                    getMainTableHeaderCellActualHeight = _this$actions.getMainTableHeaderCellActualHeight,
                    setMainTableHeaderCellWidth = _this$actions.setMainTableHeaderCellWidth,
                    setMainTableHeaderCellHeight = _this$actions.setMainTableHeaderCellHeight;

                // Set cells width first

                var cellsWidth = getMainTableCellWidth();
                setMainTableBodyCellWidth(cellsWidth);

                // Then set cells height
                var rowsHeight = getMainTableRowHeight();
                setMainTableBodyCellHeight(rowsHeight);

                if (_this.mainTable.tableHeader) {
                    // Set cells width first
                    setMainTableHeaderCellWidth(cellsWidth);

                    // Then set cells height
                    var headerHeight = getMainTableHeaderCellActualHeight();
                    setMainTableHeaderCellHeight(headerHeight);
                }
            },
            sizeFixedTable: function sizeFixedTable() {
                var fixedTable = _this.tableFixedLeft.table;
                var fixedBody = _this.tableFixedLeft.tableBody;
                var mainTHeader = _this.mainTable.tableHeader.header;
                var mainHeaderRow = mainTHeader ? _helper2.default.getSubElements(mainTHeader, '.' + _index2.default.tr) : [];
                var mainBody = _this.mainTable.tableBody;
                var mainTBody = mainBody.body;
                var mainBodyRows = _helper2.default.getSubElements(mainTBody, '.' + _index2.default.tr);
                var fixedTHeader = _this.tableFixedLeft.tableHeader.header;
                var fixexHeaderRow = fixedTHeader ? _helper2.default.getSubElements(fixedTHeader, '.' + _index2.default.tr) : [];
                var fixedTBody = fixedBody.body;
                var fixedBodyRows = _helper2.default.getSubElements(fixedTBody, '.' + _index2.default.tr);
                var mainBodyOffset = mainTBody.getBoundingClientRect();
                var scrollHeight = mainBodyOffset.height - mainTBody.clientHeight;
                var i = void 0;
                var j = void 0;
                var headerCell = void 0;
                var bodyCell = void 0;
                var fixedHeaderCell = void 0;
                var fixedBodyCell = void 0;
                var sumCellsWidth = void 0;
                var th = void 0;
                var fixedTh = void 0;
                var td = void 0;
                var fixedTd = void 0;
                for (i = 0; i < mainHeaderRow.length; i++) {
                    headerCell = _helper2.default.getSubElements(mainHeaderRow[i], '.' + _index2.default.th);
                    fixedHeaderCell = _helper2.default.getSubElements(fixexHeaderRow[i], '.' + _index2.default.th);
                    sumCellsWidth = 0;
                    for (j = 0; j < headerCell.length; j++) {
                        th = headerCell[j];
                        fixedTh = fixedHeaderCell[j];
                        if (fixedTh) {
                            fixedTh.style.width = th.style.width;
                            fixedTh.style.height = th.style.height;
                            sumCellsWidth += parseFloat(th.style.width);
                        }
                    }
                    fixexHeaderRow[i].style.width = sumCellsWidth ? sumCellsWidth + 'px' : fixexHeaderRow[i].style.width;
                }
                for (i = 0; i < mainBodyRows.length; i++) {
                    bodyCell = _helper2.default.getSubElements(mainBodyRows[i], '.' + _index2.default.td);
                    fixedBodyCell = _helper2.default.getSubElements(fixedBodyRows[i], '.' + _index2.default.td);
                    sumCellsWidth = 0;
                    for (j = 0; j < bodyCell.length; j++) {
                        td = bodyCell[j];
                        fixedTd = fixedBodyCell[j];
                        if (fixedTd) {
                            fixedTd.style.width = td.style.width;
                            fixedTd.style.height = td.style.height;
                            sumCellsWidth += parseFloat(td.style.width);
                        }
                    }
                    fixedBodyRows[i].style.width = sumCellsWidth ? sumCellsWidth + 'px' : fixedBodyRows[i].style.width;
                }
                fixedTable.style.width = fixedBodyRows[0].getBoundingClientRect().width + 'px';
                fixedTBody.style.width = mainBodyOffset.width + 'px';
                fixedTBody.style.height = mainBodyOffset.height - scrollHeight + 'px';
            },
            getMainTableHeaderCellActualWidth: function getMainTableHeaderCellActualWidth() {
                var mainHeader = _this.mainTable.tableHeader;
                var widthList = [];
                if (mainHeader) {
                    var tHeader = mainHeader.header;
                    var headerCells = _helper2.default.getSubElements(_helper2.default.getSubElements(tHeader, '.' + _index2.default.tr)[0], '.' + _index2.default.th);
                    var i = void 0;
                    var th = void 0;
                    // For performance, do not clearing element style and getting element width at the same time.
                    for (i = 0; i < headerCells.length; i++) {
                        th = headerCells[i];
                        if (th.style.width) {
                            th.style.width = null;
                        }
                    }
                    for (i = 0; i < headerCells.length; i++) {
                        th = headerCells[i];
                        widthList[i] = th.getBoundingClientRect().width;
                    }
                }
                return widthList;
            },
            getMainTableHeaderCellActualHeight: function getMainTableHeaderCellActualHeight() {
                var tHeader = _this.mainTable.tableHeader.header;
                var headerCells = _helper2.default.getSubElements(_helper2.default.getSubElements(tHeader, '.' + _index2.default.tr)[0], '.' + _index2.default.th);
                var headerHeight = 0;
                var th = void 0;
                var thHeight = void 0;
                var cellContent = void 0;
                var content = void 0;
                var i = 0;
                for (i = 0; i < headerCells.length; i++) {
                    th = headerCells[i];
                    cellContent = _helper2.default.getSubElements(th, '.' + _index2.default.thContent);
                    content = cellContent[0];
                    thHeight = (content ? content.getBoundingClientRect().height : 0) + parseInt(_helper2.default.getElementStyle(th, 'padding-top'), 10) + parseInt(_helper2.default.getElementStyle(th, 'padding-bottom'), 10) + parseInt(_helper2.default.getElementStyle(th, 'border-top-width'), 10) + parseInt(_helper2.default.getElementStyle(th, 'border-bottom-width'), 10);
                    headerHeight = Math.max(headerHeight, thHeight);
                }
                return headerHeight;
            },
            getMainTableCellWidth: function getMainTableCellWidth() {
                var _this$props = _this.props,
                    justified = _this$props.justified,
                    loading = _this$props.loading;
                var getMainTableHeaderCellActualWidth = _this.actions.getMainTableHeaderCellActualWidth;

                var columns = _this.state.thisColumns;
                var mainBody = _this.mainTable.tableBody;
                var tBody = mainBody.body;
                var bodyRows = _helper2.default.getSubElements(tBody, '.' + _index2.default.tr);
                var tableMaxWidth = tBody.clientWidth;
                var thsWidth = getMainTableHeaderCellActualWidth();
                var sumCellWidth = 0;
                var cellsWidth = [];
                var cellWidth = 0;
                var customWidth = { width: 0 };
                var columnWidth = void 0;
                var nonCustomColumnsIndex = [];
                var newColumns = columns.map(function (column, index) {
                    columnWidth = column.width;
                    if (typeof columnWidth === 'string') {
                        var lastChar = columnWidth.substr(columnWidth.length - 1);
                        if (lastChar === '%') {
                            columnWidth = tableMaxWidth * (parseFloat(columnWidth) / 100);
                        } else {
                            columnWidth = parseFloat(columnWidth);
                        }
                    }
                    return _extends({}, column, {
                        width: columnWidth
                    });
                });
                var customColumns = newColumns.filter(function (column) {
                    return column.width && column.width > 0;
                });
                if (customColumns.length > 0) {
                    customWidth = customColumns.reduce(function (a, b) {
                        return { width: a.width + b.width };
                    });
                }

                if (justified || loading) {
                    cellWidth = (tableMaxWidth - customWidth.width) / (newColumns.length - customColumns.length);
                }

                if (bodyRows.length > 0) {
                    var i = 0;
                    var j = 0;
                    var bodyCell = [];
                    var customColumn = void 0;
                    var td = void 0;
                    var thWidth = void 0;
                    var tdWidth = void 0;
                    // For performance, do not clearing element style and getting element width at the same time.
                    for (i = 0; i < bodyRows.length; i++) {
                        bodyCell = _helper2.default.getSubElements(bodyRows[i], '.' + _index2.default.td);
                        for (j = 0; j < bodyCell.length; j++) {
                            td = bodyCell[j];
                            if (td.style.width) {
                                td.style.width = null;
                            }
                        }
                    }
                    for (i = 0; i < bodyRows.length; i++) {
                        bodyCell = _helper2.default.getSubElements(bodyRows[i], '.' + _index2.default.td);
                        sumCellWidth = 0;
                        nonCustomColumnsIndex = [];
                        for (j = 0; j < bodyCell.length; j++) {
                            customColumn = newColumns[j];
                            td = bodyCell[j];
                            if (customColumn && customColumn.width) {
                                cellsWidth[j] = customColumn.width;
                            } else if (justified) {
                                cellsWidth[j] = cellWidth;
                            } else {
                                thWidth = thsWidth[j] || 0;
                                tdWidth = td.getBoundingClientRect().width;
                                cellWidth = cellsWidth[j] || 0;
                                cellsWidth[j] = Math.max(cellWidth, thWidth, tdWidth);
                                nonCustomColumnsIndex.push(j);
                            }
                            sumCellWidth += cellsWidth[j];
                        }
                    }
                } else {
                    // No data
                    var _j = 0;
                    var _customColumn = void 0;
                    for (_j = 0; _j < newColumns.length; _j++) {
                        _customColumn = newColumns[_j];
                        if (_customColumn && _customColumn.width) {
                            cellsWidth[_j] = _customColumn.width;
                        } else if (cellWidth > 0) {
                            cellsWidth[_j] = cellWidth;
                        } else {
                            cellsWidth[_j] = thsWidth[_j];
                            nonCustomColumnsIndex.push(_j);
                        }
                        sumCellWidth += cellsWidth[_j];
                    }
                }

                if (tableMaxWidth > sumCellWidth) {
                    var extra = tableMaxWidth - sumCellWidth;
                    var extraCellWidth = void 0;
                    if (nonCustomColumnsIndex.length > 0) {
                        extraCellWidth = extra / (newColumns.length - customColumns.length);
                        var _i = 0;
                        for (_i = 0; _i < nonCustomColumnsIndex.length; _i++) {
                            cellsWidth[nonCustomColumnsIndex[_i]] += extraCellWidth;
                        }
                    } else {
                        extraCellWidth = extra / newColumns.length;
                        var _i2 = 0;
                        for (_i2 = 0; _i2 < newColumns.length; _i2++) {
                            cellsWidth[_i2] += extraCellWidth;
                        }
                    }
                }

                return cellsWidth;
            },
            getMainTableRowHeight: function getMainTableRowHeight() {
                var tBody = _this.mainTable.tableBody.body;
                var bodyRows = _helper2.default.getSubElements(tBody, '.' + _index2.default.tr);
                var cellHeight = 0;
                var rowsHeight = [];
                var bodyCell = [];
                var td = void 0;
                var tdHeight = void 0;
                var cellContent = void 0;
                var content = void 0;
                var i = 0;
                var j = 0;
                for (i = 0; i < bodyRows.length; i++) {
                    bodyCell = _helper2.default.getSubElements(bodyRows[i], '.' + _index2.default.td);
                    cellHeight = rowsHeight[i] || 0;
                    for (j = 0; j < bodyCell.length; j++) {
                        td = bodyCell[j];
                        cellContent = _helper2.default.getSubElements(td, '.' + _index2.default.tdContent);
                        content = cellContent[0];
                        tdHeight = (content ? content.getBoundingClientRect().height : 0) + parseInt(_helper2.default.getElementStyle(td, 'padding-top'), 10) + parseInt(_helper2.default.getElementStyle(td, 'padding-bottom'), 10) + parseInt(_helper2.default.getElementStyle(td, 'border-top-width'), 10) + parseInt(_helper2.default.getElementStyle(td, 'border-bottom-width'), 10);
                        cellHeight = Math.max(cellHeight, tdHeight);
                    }
                    rowsHeight[i] = cellHeight;
                }
                return rowsHeight;
            },
            setMainTableBodyCellWidth: function setMainTableBodyCellWidth(cellsWidth) {
                var tBody = _this.mainTable.tableBody.body;
                var bodyRows = _helper2.default.getSubElements(tBody, '.' + _index2.default.tr);
                var cellWidth = void 0;
                var totalWidth = void 0;
                var i = void 0;
                var j = void 0;
                var bodyCell = void 0;
                for (i = 0; i < bodyRows.length; i++) {
                    bodyCell = _helper2.default.getSubElements(bodyRows[i], '.' + _index2.default.td);
                    totalWidth = 0;
                    for (j = 0; j < bodyCell.length; j++) {
                        cellWidth = cellsWidth[j] || 0;
                        bodyCell[j].style.width = cellWidth + 'px';
                        totalWidth += cellWidth;
                    }
                    bodyRows[i].style.width = totalWidth + 'px';
                }
            },
            setMainTableBodyCellHeight: function setMainTableBodyCellHeight(rowsHeight) {
                var tBody = _this.mainTable.tableBody.body;
                var bodyRows = _helper2.default.getSubElements(tBody, '.' + _index2.default.tr);
                var rowHeight = void 0;
                var i = void 0;
                var j = void 0;
                var bodyCell = void 0;
                for (i = 0; i < bodyRows.length; i++) {
                    bodyCell = _helper2.default.getSubElements(bodyRows[i], '.' + _index2.default.td);
                    rowHeight = rowsHeight[i] || 0;
                    for (j = 0; j < bodyCell.length; j++) {
                        bodyCell[j].style.height = rowHeight + 'px';
                    }
                }
            },
            setMainTableHeaderCellWidth: function setMainTableHeaderCellWidth(cellsWidth) {
                var tHeader = _this.mainTable.tableHeader.header;
                var tBody = _this.mainTable.tableBody.body;
                var headerRows = _helper2.default.getSubElements(tHeader, '.' + _index2.default.tr);
                var offsetWidth = tBody.getBoundingClientRect().width;
                var clientWidth = tBody.clientWidth;
                var scrollbarWidth = offsetWidth - clientWidth;
                var totalWidth = void 0;
                var i = void 0;
                var j = void 0;
                var headerCells = void 0;
                var cellWidth = void 0;
                for (i = 0; i < headerRows.length; i++) {
                    headerCells = _helper2.default.getSubElements(headerRows[i], '.' + _index2.default.th);
                    totalWidth = 0;
                    for (j = 0; j < headerCells.length; j++) {
                        cellWidth = cellsWidth[j] || 0;
                        if (j === headerCells.length - 1) {
                            cellWidth += scrollbarWidth;
                        }
                        headerCells[j].style.width = cellWidth + 'px';
                        totalWidth += cellWidth;
                    }
                    headerRows[i].style.width = totalWidth + 'px';
                }
            },
            setMainTableHeaderCellHeight: function setMainTableHeaderCellHeight(headerHeight) {
                var tHeader = _this.mainTable.tableHeader.header;
                var headerRows = _helper2.default.getSubElements(tHeader, '.' + _index2.default.tr);
                var headerCells = void 0;
                var i = void 0;
                var j = void 0;
                for (i = 0; i < headerRows.length; i++) {
                    headerCells = _helper2.default.getSubElements(headerRows[i], '.' + _index2.default.th);
                    for (j = 0; j < headerCells.length; j++) {
                        headerCells[j].style.height = headerHeight + 'px';
                    }
                }
            }
        };

        _this.uniqueid = (0, _uniqueid2.default)('table:');
        _this.resizer = (0, _elementResizeDetector2.default)();
        _this.containerWidth = 0;
        _this.tableWrapper = null;
        _this.mainTable = null;
        _this.state = _this.getInitState();
        _this.store = (0, _miniStore.create)({
            currentHoverKey: null,
            scrollTop: 0,
            scrollLeft: 0
        });
        return _this;
    }

    _createClass(Table, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var setTableSize = this.actions.setTableSize;

            this.onResizeDebounce = (0, _lodash2.default)(function (element) {
                var newWidth = element.offsetWidth;
                if (_this2.containerWidth !== newWidth) {
                    _this2.containerWidth = newWidth;
                    setTableSize();
                }
            }, 100);
            this.resizer.listenTo(this.tableWrapper, this.onResizeDebounce);
            setTableSize();
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.resizer.removeListener(this.tableWrapper, this.onResizeDebounce);
            this.tableWrapper = null;
            this.mainTable = null;
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var equal = (0, _isEqual2.default)(nextProps.columns.map(function (it) {
                return { key: it.key, sortOrder: it.sortOrder };
            }), this.props.columns.map(function (it) {
                return { key: it.key, sortOrder: it.sortOrder };
            }));
            if (!equal) {
                var columns = nextProps.columns;

                this.setState({ thisColumns: this.columnsParser(columns) });
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState) {
            var equal = prevProps.columns.length === this.props.columns.length && (0, _isEqual2.default)(prevProps.columns.map(function (it) {
                return { key: it.key, sortOrder: it.sortOrder };
            }), this.props.columns.map(function (it) {
                return { key: it.key, sortOrder: it.sortOrder };
            }));
            if (prevProps.maxHeight !== this.props.maxHeight || !(0, _isEqual2.default)(prevProps.data, this.props.data) || !equal || this.props.loading !== prevProps.loading) {
                this.actions.setTableSize();
            }
        }
    }, {
        key: 'getInitState',
        value: function getInitState() {
            return {
                hoveredRowKey: null,
                scrollTop: 0,
                thisColumns: this.columnsParser()
            };
        }
    }, {
        key: 'columnsParser',
        value: function columnsParser() {
            var _this3 = this;

            var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.columns;

            // Checking columns
            var filterColumns = [];
            columns.forEach(function (obj) {
                // Filter out undefined and null column.
                if (obj) {
                    var cloneColumn = _extends({}, obj);
                    // Set default value to column's key attribute.
                    cloneColumn.key = cloneColumn.key !== undefined ? cloneColumn.key : _this3.uniqueid();
                    filterColumns.push(cloneColumn);
                }
            });
            return filterColumns;
        }
    }, {
        key: 'leftColumns',
        value: function leftColumns() {
            var columns = this.state.thisColumns;
            var fixedColumns = columns.filter(function (column) {
                return column.fixed === true;
            });
            var lastFixedColumn = fixedColumns[fixedColumns.length - 1];
            var lastFixedIndex = columns.lastIndexOf(lastFixedColumn);
            return columns.filter(function (column, index) {
                return index <= lastFixedIndex;
            });
        }
    }, {
        key: 'isAnyColumnsLeftFixed',
        value: function isAnyColumnsLeftFixed() {
            var columns = this.state.thisColumns;
            return columns.some(function (column) {
                return column.fixed === true;
            });
        }
    }, {
        key: 'renderTable',
        value: function renderTable() {
            var _this4 = this;

            var columns = this.state.thisColumns;
            var _state = this.state,
                hoveredRowKey = _state.hoveredRowKey,
                scrollTop = _state.scrollTop;
            var _actions = this.actions,
                detectScrollTarget = _actions.detectScrollTarget,
                handleBodyScroll = _actions.handleBodyScroll,
                handleRowHover = _actions.handleRowHover;
            var _props = this.props,
                data = _props.data,
                emptyText = _props.emptyText,
                expandedRowKeys = _props.expandedRowKeys,
                expandedRowRender = _props.expandedRowRender,
                loading = _props.loading,
                onRowClick = _props.onRowClick,
                showHeader = _props.showHeader,
                useFixedHeader = _props.useFixedHeader,
                rowClassName = _props.rowClassName,
                rowKey = _props.rowKey;


            return _react2.default.createElement(_TableTemplate2.default, {
                columns: columns,
                hoveredRowKey: hoveredRowKey,
                data: data,
                emptyText: emptyText,
                expandedRowKeys: expandedRowKeys,
                expandedRowRender: expandedRowRender,
                loading: loading,
                onMouseOver: detectScrollTarget,
                onRowClick: onRowClick,
                onRowHover: handleRowHover,
                onTouchStart: detectScrollTarget,
                onScroll: handleBodyScroll,
                scrollTop: scrollTop,
                showHeader: showHeader,
                useFixedHeader: useFixedHeader,
                rowClassName: rowClassName,
                rowKey: rowKey,
                ref: function ref(node) {
                    _this4.mainTable = node;
                },
                tableRole: 'normalTable'
            });
        }
    }, {
        key: 'renderFixedLeftTable',
        value: function renderFixedLeftTable() {
            var _this5 = this;

            var fixedColumns = this.leftColumns();
            var _state2 = this.state,
                hoveredRowKey = _state2.hoveredRowKey,
                scrollTop = _state2.scrollTop;
            var _actions2 = this.actions,
                detectScrollTarget = _actions2.detectScrollTarget,
                handleBodyScroll = _actions2.handleBodyScroll,
                handleRowHover = _actions2.handleRowHover;
            var _props2 = this.props,
                data = _props2.data,
                emptyText = _props2.emptyText,
                expandedRowKeys = _props2.expandedRowKeys,
                expandedRowRender = _props2.expandedRowRender,
                loading = _props2.loading,
                onRowClick = _props2.onRowClick,
                showHeader = _props2.showHeader,
                useFixedHeader = _props2.useFixedHeader,
                rowClassName = _props2.rowClassName,
                rowKey = _props2.rowKey;

            return _react2.default.createElement(_TableTemplate2.default, {
                columns: fixedColumns,
                hoveredRowKey: hoveredRowKey,
                className: _index2.default.tableFixedLeftContainer,
                data: data,
                expandedRowKeys: expandedRowKeys,
                expandedRowRender: expandedRowRender,
                emptyText: emptyText,
                loading: loading,
                onMouseOver: detectScrollTarget,
                onRowClick: onRowClick,
                onRowHover: handleRowHover,
                onTouchStart: detectScrollTarget,
                onScroll: handleBodyScroll,
                scrollTop: scrollTop,
                showHeader: showHeader,
                useFixedHeader: useFixedHeader,
                rowClassName: rowClassName,
                rowKey: rowKey,
                ref: function ref(node) {
                    _this5.tableFixedLeft = node;
                },
                tableRole: 'leftTable'
            });
        }
    }, {
        key: 'renderTitle',
        value: function renderTitle() {
            var _this6 = this;

            var title = this.props.title;

            var content = typeof title === 'function' ? title() : title;
            return _react2.default.createElement(
                'div',
                {
                    className: _index2.default.title,
                    ref: function ref(node) {
                        _this6.title = node;
                    }
                },
                content
            );
        }
    }, {
        key: 'renderFooter',
        value: function renderFooter() {
            var _this7 = this;

            var footer = this.props.footer;

            var content = typeof footer === 'function' ? footer() : footer;
            return _react2.default.createElement(
                'div',
                {
                    className: _index2.default.tfoot,
                    ref: function ref(node) {
                        _this7.foot = node;
                    }
                },
                content
            );
        }
    }, {
        key: 'renderLoader',
        value: function renderLoader() {
            var _props3 = this.props,
                loaderRender = _props3.loaderRender,
                _props3$showHeader = _props3.showHeader,
                showHeader = _props3$showHeader === undefined ? true : _props3$showHeader;

            var loaderOverlayClassName = showHeader ? _index2.default.loaderOverlay : (0, _classnames2.default)(_index2.default.loaderOverlay, _index2.default.noHeader);
            var defaultLoader = function defaultLoader() {
                return _react2.default.createElement(
                    'div',
                    { className: loaderOverlayClassName },
                    _react2.default.createElement('span', { className: (0, _classnames2.default)(_index2.default.loader, _index2.default.loaderLarge) })
                );
            };
            var loader = loaderRender || defaultLoader;
            return loader();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this8 = this;

            var _props4 = this.props,
                data = _props4.data,
                className = _props4.className,
                loading = _props4.loading,
                bordered = _props4.bordered,
                justified = _props4.justified,
                title = _props4.title,
                footer = _props4.footer,
                hoverable = _props4.hoverable,
                useFixedHeader = _props4.useFixedHeader,
                props = _objectWithoutProperties(_props4, ['data', 'className', 'loading', 'bordered', 'justified', 'title', 'footer', 'hoverable', 'useFixedHeader']);

            delete props.rowKey;
            delete props.columns;
            delete props.expandedRowRender;
            delete props.expandedRowKeys;
            delete props.maxHeight;
            delete props.rowClassName;
            delete props.onRowClick;
            delete props.emptyText;
            delete props.showHeader;

            return _react2.default.createElement(
                _miniStore.Provider,
                { store: this.store },
                _react2.default.createElement(
                    'div',
                    _extends({}, props, {
                        className: (0, _classnames2.default)(className, _index2.default.tableWrapper, _defineProperty({}, _index2.default.tableMinimalism, !bordered), _defineProperty({}, _index2.default.tableBordered, bordered), _defineProperty({}, _index2.default.tableAutoFit, !justified), _defineProperty({}, _index2.default.tableFixedHeader, useFixedHeader), _defineProperty({}, _index2.default.tableNoData, !data || data.length === 0), _defineProperty({}, _index2.default.tableHover, hoverable)),
                        ref: function ref(node) {
                            if (node) {
                                _this8.tableWrapper = node;
                            }
                        }
                    }),
                    title && this.renderTitle(),
                    _react2.default.createElement(
                        'div',
                        { className: _index2.default.tableArea },
                        this.renderTable(),
                        this.isAnyColumnsLeftFixed() && data.length > 0 && this.renderFixedLeftTable(),
                        loading && this.renderLoader()
                    ),
                    footer && this.renderFooter()
                )
            );
        }
    }]);

    return Table;
}(_react.PureComponent), _class.propTypes = {
    bordered: _propTypes2.default.bool,
    justified: _propTypes2.default.bool,
    columns: _propTypes2.default.array,
    data: _propTypes2.default.array,
    emptyText: _propTypes2.default.func,
    expandedRowKeys: _propTypes2.default.array,
    expandedRowRender: _propTypes2.default.func,
    footer: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
    hoverable: _propTypes2.default.bool,
    loading: _propTypes2.default.bool,
    loaderRender: _propTypes2.default.func,
    maxHeight: _propTypes2.default.number,
    onRowClick: _propTypes2.default.func,
    showHeader: _propTypes2.default.bool,
    title: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
    useFixedHeader: _propTypes2.default.bool,
    rowClassName: _propTypes2.default.func,
    rowKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
}, _class.defaultProps = {
    bordered: true,
    justified: true,
    columns: [],
    data: [],
    hoverable: true,
    loading: false,
    maxHeight: 0,
    useFixedHeader: false
}, _temp);
exports.default = Table;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("element-resize-detector");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("lodash.debounce");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var getElementStyle = function getElementStyle(e, style) {
    return e.style[style] || window.getComputedStyle(e, null)[style];
};

var getSubElements = function getSubElements(parent, selector) {
    return [].filter.call(parent.querySelectorAll(selector), function (e) {
        return e.parentNode === parent;
    });
};

exports.default = {
    getElementStyle: getElementStyle,
    getSubElements: getSubElements
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var uniqueid = function uniqueid() {
    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var suffix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    var id = 0;
    return function () {
        return '' + prefix + id++ + suffix;
    };
};

exports.default = uniqueid;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _classnames = __webpack_require__(2);

var _classnames2 = _interopRequireDefault(_classnames);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _miniStore = __webpack_require__(4);

var _propTypes = __webpack_require__(3);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _index = __webpack_require__(1);

var _index2 = _interopRequireDefault(_index);

var _TableHeader = __webpack_require__(13);

var _TableHeader2 = _interopRequireDefault(_TableHeader);

var _TableBody = __webpack_require__(14);

var _TableBody2 = _interopRequireDefault(_TableBody);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableTemplate = (_temp2 = _class = function (_PureComponent) {
    _inherits(TableTemplate, _PureComponent);

    function TableTemplate() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, TableTemplate);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TableTemplate.__proto__ || Object.getPrototypeOf(TableTemplate)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            scrollLeft: 0
        }, _this.handleBodyScroll = function (event) {
            var _this$props = _this.props,
                onScroll = _this$props.onScroll,
                showHeader = _this$props.showHeader,
                useFixedHeader = _this$props.useFixedHeader;
            // scrollLeft is for scrolling table header and body at the same time.

            if (showHeader && useFixedHeader) {
                _this.setState({
                    scrollLeft: event.target.scrollLeft
                });
            }
            onScroll(event);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(TableTemplate, [{
        key: 'renderHeader',
        value: function renderHeader() {
            var _this2 = this;

            var columns = this.props.columns;
            var scrollLeft = this.state.scrollLeft;

            return _react2.default.createElement(
                TableHeaderHoc,
                null,
                _react2.default.createElement(_TableHeader2.default, {
                    scrollLeft: scrollLeft,
                    columns: columns,
                    ref: function ref(node) {
                        if (node) {
                            _this2.tableHeader = node;
                        }
                    }
                })
            );
        }
    }, {
        key: 'renderBody',
        value: function renderBody() {
            var _this3 = this;

            var _props = this.props,
                columns = _props.columns,
                hoveredRowKey = _props.hoveredRowKey,
                data = _props.data,
                emptyText = _props.emptyText,
                expandedRowKeys = _props.expandedRowKeys,
                expandedRowRender = _props.expandedRowRender,
                loading = _props.loading,
                onMouseOver = _props.onMouseOver,
                onTouchStart = _props.onTouchStart,
                onRowHover = _props.onRowHover,
                onRowClick = _props.onRowClick,
                rowClassName = _props.rowClassName,
                rowKey = _props.rowKey,
                scrollTop = _props.scrollTop,
                tableRole = _props.tableRole;


            return _react2.default.createElement(
                TableBodyHoc,
                null,
                _react2.default.createElement(_TableBody2.default, {
                    columns: columns,
                    hoveredRowKey: hoveredRowKey,
                    expandedRowKeys: expandedRowKeys,
                    expandedRowRender: expandedRowRender,
                    emptyText: emptyText,
                    loading: loading,
                    onMouseOver: onMouseOver,
                    onTouchStart: onTouchStart,
                    onRowHover: onRowHover,
                    onRowClick: onRowClick,
                    onScroll: this.handleBodyScroll,
                    scrollTop: scrollTop,
                    records: data,
                    ref: function ref(node) {
                        if (node) {
                            _this3.tableBody = node;
                        }
                    },
                    rowClassName: rowClassName,
                    rowKey: rowKey,
                    tableRole: tableRole
                })
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props2 = this.props,
                className = _props2.className,
                showHeader = _props2.showHeader;


            return _react2.default.createElement(
                'div',
                {
                    ref: function ref(node) {
                        if (node) {
                            _this4.table = node;
                        }
                    },
                    className: (0, _classnames2.default)(className, _index2.default.table)
                },
                showHeader && this.renderHeader(),
                this.renderBody()
            );
        }
    }]);

    return TableTemplate;
}(_react.PureComponent), _class.propTypes = {
    columns: _propTypes2.default.array,
    hoveredRowKey: _propTypes2.default.any,
    data: _propTypes2.default.array,
    emptyText: _propTypes2.default.func,
    expandedRowKeys: _propTypes2.default.array,
    expandedRowRender: _propTypes2.default.func,
    loading: _propTypes2.default.bool,
    onMouseOver: _propTypes2.default.func,
    onTouchStart: _propTypes2.default.func,
    onScroll: _propTypes2.default.func,
    onRowHover: _propTypes2.default.func,
    onRowClick: _propTypes2.default.func,
    rowClassName: _propTypes2.default.func,
    rowKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    scrollTop: _propTypes2.default.number,
    showHeader: _propTypes2.default.bool,
    useFixedHeader: _propTypes2.default.bool
}, _class.defaultProps = {
    showHeader: true
}, _temp2);


var TableBodyHoc = (0, _miniStore.connect)(function (state, props) {
    return {
        scrollTop: state.scrollTop,
        scrolling: state.scrollLeft,
        store: state.score
    };
})(function (props) {
    return _react2.default.cloneElement(props.children, {
        scrollTop: props.scrollTop,
        scrollLeft: props.scrolling,
        store: props.store
    });
});

var TableHeaderHoc = (0, _miniStore.connect)(function (state, props) {
    return {
        scrollLeft: state.scrollLeft
    };
})(function (props) {
    return _react2.default.cloneElement(props.children, {
        scrollLeft: props.scrollLeft
    });
});

exports.default = TableTemplate;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _classnames = __webpack_require__(2);

var _classnames2 = _interopRequireDefault(_classnames);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(3);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isEqual = __webpack_require__(5);

var _isEqual2 = _interopRequireDefault(_isEqual);

var _index = __webpack_require__(1);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableHeader = (_temp = _class = function (_Component) {
    _inherits(TableHeader, _Component);

    function TableHeader() {
        _classCallCheck(this, TableHeader);

        return _possibleConstructorReturn(this, (TableHeader.__proto__ || Object.getPrototypeOf(TableHeader)).apply(this, arguments));
    }

    _createClass(TableHeader, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState) {
            var scrollLeft = this.props.scrollLeft;

            if (scrollLeft !== prevProps.scrollLeft) {
                this.header.scrollLeft = scrollLeft;
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            return nextProps.columns.some(function (obj, index, array) {
                return typeof obj.title === 'function';
            }) || nextProps.scrollLeft !== this.props.scrollLeft || !(0, _isEqual2.default)(nextProps.columns, this.props.columns);
        }
    }, {
        key: 'renderCell',
        value: function renderCell() {
            var columns = this.props.columns;

            return columns.map(function (column, index) {
                var _cx;

                var key = 'table_header_cell_' + index;
                var onClick = column.onClick,
                    sortable = column.sortable,
                    sortOrder = column.sortOrder,
                    _column$title = column.title,
                    title = _column$title === undefined ? '' : _column$title;


                return _react2.default.createElement(
                    'div',
                    {
                        key: key,
                        className: (0, _classnames2.default)(column.className, column.headerClassName, (_cx = {}, _defineProperty(_cx, _index2.default.th, true), _defineProperty(_cx, _index2.default.sortable, sortable), _defineProperty(_cx, _index2.default.sortableHighlight, sortable && (sortOrder === 'asc' || sortOrder === 'desc')), _cx)),
                        style: _extends({}, column.style, column.headerStyle),
                        role: 'button',
                        tabIndex: '0',
                        onClick: onClick
                    },
                    _react2.default.createElement(
                        'div',
                        { className: _index2.default.thContent },
                        typeof title === 'function' ? title() : title,
                        sortable && sortOrder === 'asc' && _react2.default.createElement('i', { className: _index2.default.orderAsc }),
                        sortable && sortOrder === 'desc' && _react2.default.createElement('i', { className: _index2.default.orderDesc })
                    )
                );
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                'div',
                {
                    className: _index2.default.thead,
                    ref: function ref(node) {
                        _this2.header = node;
                    }
                },
                _react2.default.createElement(
                    'div',
                    { className: _index2.default.tr },
                    this.renderCell()
                )
            );
        }
    }]);

    return TableHeader;
}(_react.Component), _class.propTypes = {
    columns: _propTypes2.default.array,
    scrollLeft: _propTypes2.default.number
}, _temp);
exports.default = TableHeader;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(3);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _index = __webpack_require__(1);

var _index2 = _interopRequireDefault(_index);

var _TableRow = __webpack_require__(15);

var _TableRow2 = _interopRequireDefault(_TableRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableBody = (_temp2 = _class = function (_PureComponent) {
    _inherits(TableBody, _PureComponent);

    function TableBody() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, TableBody);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TableBody.__proto__ || Object.getPrototypeOf(TableBody)).call.apply(_ref, [this].concat(args))), _this), _this.onScroll = function (e) {
            e.stopPropagation();
            var _this$props = _this.props,
                store = _this$props.store,
                tableRole = _this$props.tableRole,
                scrollLeft = _this$props.scrollLeft;

            store.setState({
                scrollTop: e.target.scrollTop,
                scrollLeft: tableRole === 'leftTable' ? scrollLeft : e.target.scrollLeft
            });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(TableBody, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                onMouseOver = _props.onMouseOver,
                onTouchStart = _props.onTouchStart;

            this.body.addEventListener('mouseover', onMouseOver);
            this.body.addEventListener('touchstart', onTouchStart);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var _props2 = this.props,
                onMouseOver = _props2.onMouseOver,
                onTouchStart = _props2.onTouchStart;

            this.body.removeEventListener('mouseover', onMouseOver);
            this.body.removeEventListener('touchstart', onTouchStart);
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState) {
            if (this.props.scrollTop !== prevProps.scrollTop) {
                var scrollTop = this.props.scrollTop;

                if (this.body.scrollTop !== scrollTop) {
                    this.body.scrollTop = scrollTop;
                }
            }
        }
    }, {
        key: 'getRowKey',
        value: function getRowKey(record, index) {
            var rowKey = this.props.rowKey;
            var key = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];
            return key === undefined ? 'table_row_' + index : key;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props3 = this.props,
                columns = _props3.columns,
                expandedRowKeys = _props3.expandedRowKeys,
                expandedRowRender = _props3.expandedRowRender,
                emptyText = _props3.emptyText,
                loading = _props3.loading,
                onRowHover = _props3.onRowHover,
                onRowClick = _props3.onRowClick,
                records = _props3.records,
                rowClassName = _props3.rowClassName;

            var noData = !records || records.length === 0;
            return _react2.default.createElement(
                'div',
                {
                    className: _index2.default.tbody,
                    ref: function ref(node) {
                        _this2.body = node;
                    },
                    onScroll: this.onScroll
                },
                records.map(function (row, index) {
                    var key = _this2.getRowKey(row, index);
                    var className = rowClassName(row, key);
                    return _react2.default.createElement(_TableRow2.default, {
                        columns: columns,
                        expandedRowKeys: expandedRowKeys,
                        expandedRowRender: expandedRowRender,
                        rowKey: key,
                        rowIndex: index,
                        key: key,
                        onHover: onRowHover,
                        onRowClick: onRowClick,
                        record: row,
                        className: className
                    });
                }),
                noData && !loading && _react2.default.createElement(
                    'div',
                    { className: _index2.default.tablePlaceholder },
                    emptyText()
                ),
                noData && loading && _react2.default.createElement('div', { className: _index2.default.tableNoDataLoader })
            );
        }
    }]);

    return TableBody;
}(_react.PureComponent), _class.propTypes = {
    columns: _propTypes2.default.array,
    hoveredRowKey: _propTypes2.default.any,
    expandedRowKeys: _propTypes2.default.array,
    expandedRowRender: _propTypes2.default.func,
    emptyText: _propTypes2.default.func,
    loading: _propTypes2.default.bool,
    onMouseOver: _propTypes2.default.func,
    onTouchStart: _propTypes2.default.func,
    onScroll: _propTypes2.default.func,
    onRowHover: _propTypes2.default.func,
    onRowClick: _propTypes2.default.func,
    records: _propTypes2.default.array,
    rowClassName: _propTypes2.default.func,
    rowKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    scrollTop: _propTypes2.default.number,
    store: _propTypes2.default.any, // mini-store
    tableRole: _propTypes2.default.string, // present fixed left table or normal table
    scrollLeft: _propTypes2.default.number // From table body HOC
}, _class.defaultProps = {
    emptyText: function emptyText() {
        return 'No Data';
    },
    onMouseOver: function onMouseOver() {},
    onTouchStart: function onTouchStart() {},
    onScroll: function onScroll() {},
    records: [],
    rowKey: 'key',
    rowClassName: function rowClassName() {}
}, _temp2);
exports.default = TableBody;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _classnames = __webpack_require__(2);

var _classnames2 = _interopRequireDefault(_classnames);

var _ensureArray = __webpack_require__(16);

var _ensureArray2 = _interopRequireDefault(_ensureArray);

var _miniStore = __webpack_require__(4);

var _get = __webpack_require__(17);

var _get2 = _interopRequireDefault(_get);

var _isEqual = __webpack_require__(5);

var _isEqual2 = _interopRequireDefault(_isEqual);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(3);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _index = __webpack_require__(1);

var _index2 = _interopRequireDefault(_index);

var _TableCell = __webpack_require__(18);

var _TableCell2 = _interopRequireDefault(_TableCell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableRow = (_temp2 = _class = function (_Component) {
    _inherits(TableRow, _Component);

    function TableRow() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, TableRow);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TableRow.__proto__ || Object.getPrototypeOf(TableRow)).call.apply(_ref, [this].concat(args))), _this), _this.handleRowClick = function (event) {
            var _this$props = _this.props,
                onRowClick = _this$props.onRowClick,
                record = _this$props.record,
                rowIndex = _this$props.rowIndex;

            onRowClick(record, rowIndex, event);
        }, _this.handleRowMouseEnter = function (event) {
            var _this$props2 = _this.props,
                rowKey = _this$props2.rowKey,
                store = _this$props2.store,
                hovered = _this$props2.hovered;

            if (!hovered) {
                store.setState({ currentHoverKey: rowKey });
            }
        }, _this.handleRowMouseLeave = function (event) {
            var _this$props3 = _this.props,
                store = _this$props3.store,
                hovered = _this$props3.hovered;

            if (hovered) {
                store.setState({ currentHoverKey: null });
            }
        }, _this.isRowExpanded = function (record, rowKey) {
            var expandedRows = (0, _ensureArray2.default)(_this.props.expandedRowKeys).filter(function (expandedRowKey) {
                return expandedRowKey === rowKey;
            });
            return expandedRows.length > 0;
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(TableRow, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            var columnEqual = (0, _isEqual2.default)(nextProps.columns.map(function (it) {
                return { key: it.key, sortOrder: it.sortOrder };
            }), this.props.columns.map(function (it) {
                return { key: it.key, sortOrder: it.sortOrder };
            }));
            var recordEqual = (0, _isEqual2.default)(nextProps.record, this.props.record);
            return this.props.className !== nextProps.className || this.props.hovered !== nextProps.hovered || !columnEqual || !recordEqual || this.props.isExpanded !== nextProps.isExpanded;
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.row.addEventListener('mouseenter', this.handleRowMouseEnter);
            this.row.addEventListener('mouseleave', this.handleRowMouseLeave);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.row.removeEventListener('mouseenter', this.handleRowMouseEnter);
            this.row.removeEventListener('mouseleave', this.handleRowMouseLeave);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                columns = _props.columns,
                hovered = _props.hovered,
                expandedRowRender = _props.expandedRowRender,
                rowKey = _props.rowKey,
                rowIndex = _props.rowIndex,
                record = _props.record,
                className = _props.className,
                isExpanded = _props.isExpanded;


            return _react2.default.createElement(
                'div',
                {
                    className: (0, _classnames2.default)(_index2.default.tr, className, _defineProperty({}, _index2.default['tr-hover'], hovered)),
                    ref: function ref(node) {
                        _this2.row = node;
                    },
                    role: 'presentation',
                    onClick: this.handleRowClick
                },
                columns.map(function (column, index) {
                    var key = rowKey + '_' + index;
                    // dataKey is an alias for dataIndex
                    var dataKey = typeof column.dataKey !== 'undefined' ? column.dataKey : column.dataIndex;
                    var cellValue = (0, _get2.default)(record, dataKey);
                    if (typeof column.render === 'function') {
                        cellValue = column.render(cellValue, record, rowIndex);
                    }

                    return _react2.default.createElement(
                        _TableCell2.default,
                        {
                            key: key,
                            className: (0, _classnames2.default)(column.className, column.cellClassName),
                            style: _extends({}, column.style, column.cellStyle)
                        },
                        cellValue
                    );
                }),
                isExpanded && expandedRowRender && _react2.default.createElement(
                    'div',
                    { className: _index2.default['tr-expand'] },
                    expandedRowRender(record, rowIndex)
                )
            );
        }
    }]);

    return TableRow;
}(_react.Component), _class.propTypes = {
    columns: _propTypes2.default.array,
    hoveredRowKey: _propTypes2.default.any,
    expandedRowKeys: _propTypes2.default.array,
    expandedRowRender: _propTypes2.default.func,
    rowKey: _propTypes2.default.any,
    rowIndex: _propTypes2.default.number,
    onHover: _propTypes2.default.func,
    onRowClick: _propTypes2.default.func,
    record: _propTypes2.default.object,
    rowClassName: _propTypes2.default.func,
    isExpanded: _propTypes2.default.bool,
    store: _propTypes2.default.any,
    hovered: _propTypes2.default.bool
}, _class.defaultProps = {
    expandedRowKeys: [],
    expandedRowRender: function expandedRowRender() {},
    onHover: function onHover() {},
    onRowClick: function onRowClick() {},
    record: {},
    rowClassName: function rowClassName() {
        return '';
    }
}, _temp2);
exports.default = (0, _miniStore.connect)(function (state, props) {
    var currentHoverKey = state.currentHoverKey;
    var rowKey = props.rowKey,
        expandedRowKeys = props.expandedRowKeys,
        expandedRowRender = props.expandedRowRender;

    return {
        hovered: currentHoverKey === rowKey,
        isExpanded: expandedRowRender && expandedRowKeys.indexOf(rowKey) >= 0
    };
})(TableRow);

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("ensure-array");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("lodash/get");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = __webpack_require__(2);

var _classnames2 = _interopRequireDefault(_classnames);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _index = __webpack_require__(1);

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var TableCell = function TableCell(_ref) {
    var className = _ref.className,
        children = _ref.children,
        props = _objectWithoutProperties(_ref, ['className', 'children']);

    return _react2.default.createElement(
        'div',
        _extends({}, props, {
            className: (0, _classnames2.default)(className, _index2.default.td)
        }),
        _react2.default.createElement(
            'div',
            { className: _index2.default.tdContent },
            children
        )
    );
};

exports.default = TableCell;

/***/ })
/******/ ]);
//# sourceMappingURL=index.js.map