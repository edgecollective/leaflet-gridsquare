'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _events = require('events');

var _stacktrace = require('./stacktrace');

var _stacktrace2 = _interopRequireDefault(_stacktrace);

var _LogLevel = require('./LogLevel');

var _LogLevel2 = _interopRequireDefault(_LogLevel);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Logger = function (_EventEmitter) {
    _inherits(Logger, _EventEmitter);

    function Logger(namespace, options) {
        _classCallCheck(this, Logger);

        var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

        _this.namespace = '';
        _this.level = _constants.OFF;
        _this.stacktrace = false;
        _this.chainedHandlers = [];


        if ((typeof namespace === 'undefined' ? 'undefined' : _typeof(namespace)) === 'object') {
            options = namespace;
            namespace = ''; // master
        }

        var _options = _extends({}, options),
            _options$level = _options.level,
            level = _options$level === undefined ? _this.level : _options$level;

        _this.namespace = namespace;
        _this.setLevel(level);
        return _this;
    }

    Logger.prototype.invokeChainedHandlers = function invokeChainedHandlers(level, messages) {
        var _this2 = this;

        var i = 0;

        var context = {
            namespace: this.namespace,
            level: level,
            stackframes: []
        };
        var next = function next() {
            var handler = i < _this2.chainedHandlers.length ? _this2.chainedHandlers[i] : null;
            if (!handler) {
                return;
            }

            ++i;
            handler(_extends({}, context), messages, next);
        };

        if (this.stacktrace) {
            try {
                var stackframes = _stacktrace2['default'].get();
                context.stackframes = stackframes;
                this.emit('log', _extends({}, context), messages);
            } catch (e) {
                // Ignore
            }

            next();
        } else {
            try {
                this.emit('log', _extends({}, context), messages);
            } catch (e) {
                // Ignore
            }

            next();
        }
    };

    Logger.prototype.use = function use(handler) {
        if (typeof handler === 'function') {
            this.chainedHandlers.push(handler);
        }
        return this;
    };

    Logger.prototype.enableStackTrace = function enableStackTrace() {
        this.stacktrace = true;
    };

    Logger.prototype.disableStackTrace = function disableStackTrace() {
        this.stacktrace = false;
    };
    // Changes the current logging level for the logging instance


    Logger.prototype.setLevel = function setLevel(level) {
        if (level instanceof _LogLevel2['default']) {
            this.level = level;
        }

        this.emit('setLevel', this.level);

        return this.level;
    };
    // Returns the current logging level fo the logging instance


    Logger.prototype.getLevel = function getLevel() {
        return this.level;
    };

    Logger.prototype.log = function log(level) {
        if (level instanceof _LogLevel2['default'] && level.value >= this.level.value) {
            for (var _len = arguments.length, messages = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                messages[_key - 1] = arguments[_key];
            }

            this.invokeChainedHandlers(level, messages);
        }
    };

    Logger.prototype.trace = function trace() {
        if (_constants.TRACE.value >= this.level.value) {
            for (var _len2 = arguments.length, messages = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                messages[_key2] = arguments[_key2];
            }

            this.invokeChainedHandlers(_constants.TRACE, messages);
        }
    };

    Logger.prototype.debug = function debug() {
        if (_constants.DEBUG.value >= this.level.value) {
            for (var _len3 = arguments.length, messages = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                messages[_key3] = arguments[_key3];
            }

            this.invokeChainedHandlers(_constants.DEBUG, messages);
        }
    };

    Logger.prototype.info = function info() {
        if (_constants.INFO.value >= this.level.value) {
            for (var _len4 = arguments.length, messages = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                messages[_key4] = arguments[_key4];
            }

            this.invokeChainedHandlers(_constants.INFO, messages);
        }
    };

    Logger.prototype.warn = function warn() {
        if (_constants.WARN.value >= this.level.value) {
            for (var _len5 = arguments.length, messages = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                messages[_key5] = arguments[_key5];
            }

            this.invokeChainedHandlers(_constants.WARN, messages);
        }
    };

    Logger.prototype.error = function error() {
        if (_constants.ERROR.value >= this.level.value) {
            for (var _len6 = arguments.length, messages = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                messages[_key6] = arguments[_key6];
            }

            this.invokeChainedHandlers(_constants.ERROR, messages);
        }
    };

    return Logger;
}(_events.EventEmitter);

exports['default'] = Logger;