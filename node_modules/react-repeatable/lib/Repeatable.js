'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _chainedFunction = require('chained-function');

var _chainedFunction2 = _interopRequireDefault(_chainedFunction);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Repeatable = (_temp2 = _class = function (_PureComponent) {
    _inherits(Repeatable, _PureComponent);

    function Repeatable() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Repeatable);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Repeatable.__proto__ || Object.getPrototypeOf(Repeatable)).call.apply(_ref, [this].concat(args))), _this), _this.repeatDelayTimer = null, _this.repeatIntervalTimer = null, _this.repeatAmount = 0, _this.acquireTimer = function () {
            var repeatDelay = Math.max(Number(_this.props.repeatDelay) || 0, 0);
            var repeatInterval = Math.max(Number(_this.props.repeatInterval) || 0, 0);
            var repeatCount = Math.max(Number(_this.props.repeatCount) || 0, 0);

            _this.repeatAmount = 0;
            _this.releaseTimer();

            _this.repeatDelayTimer = setTimeout(function () {
                if (repeatCount > 0 && _this.repeatAmount >= repeatCount) {
                    return;
                }

                _this.repeatAmount++;

                if (typeof _this.props.onHoldStart === 'function') {
                    _this.props.onHoldStart();
                }
                if (typeof _this.props.onHold === 'function') {
                    _this.props.onHold();
                }

                _this.repeatIntervalTimer = setInterval(function () {
                    if (repeatCount > 0 && _this.repeatAmount >= repeatCount) {
                        return;
                    }

                    _this.repeatAmount++;

                    if (typeof _this.props.onHold === 'function') {
                        _this.props.onHold();
                    }
                }, repeatInterval);
            }, repeatDelay);
        }, _this.releaseTimer = function () {
            if (_this.repeatDelayTimer) {
                clearTimeout(_this.repeatDelayTimer);
                _this.repeatDelayTimer = null;
            }
            if (_this.repeatIntervalTimer) {
                clearInterval(_this.repeatIntervalTimer);
                _this.repeatIntervalTimer = null;
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Repeatable, [{
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.repeatAmount = 0;
            this.releaseTimer();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                Component = _props.componentClass,
                disabled = _props.disabled,
                repeatDelay = _props.repeatDelay,
                repeatInterval = _props.repeatInterval,
                repeatCount = _props.repeatCount,
                onPress = _props.onPress,
                onHoldStart = _props.onHoldStart,
                onHold = _props.onHold,
                onHoldEnd = _props.onHoldEnd,
                onRelease = _props.onRelease,
                onMouseDown = _props.onMouseDown,
                onTouchStart = _props.onTouchStart,
                onTouchCancel = _props.onTouchCancel,
                onTouchEnd = _props.onTouchEnd,
                props = _objectWithoutProperties(_props, ['componentClass', 'disabled', 'repeatDelay', 'repeatInterval', 'repeatCount', 'onPress', 'onHoldStart', 'onHold', 'onHoldEnd', 'onRelease', 'onMouseDown', 'onTouchStart', 'onTouchCancel', 'onTouchEnd']);

            var release = function release(event) {
                if (_this2.repeatAmount > 0) {
                    if (typeof _this2.props.onHoldEnd === 'function') {
                        _this2.props.onHoldEnd();
                    }
                }

                _this2.repeatAmount = 0;
                _this2.releaseTimer();

                if (typeof _this2.props.onRelease === 'function') {
                    _this2.props.onRelease(event);
                }
            };

            var press = function press(event) {
                event.persist();

                var releaseOnce = function releaseOnce(event) {
                    document.documentElement.removeEventListener('mouseup', releaseOnce);
                    release(event);
                };
                document.documentElement.addEventListener('mouseup', releaseOnce);

                if (typeof _this2.props.onPress === 'function') {
                    _this2.props.onPress(event);
                }

                _this2.acquireTimer();
            };

            return _react2.default.createElement(Component, _extends({
                role: 'presentation'
            }, props, {
                onMouseDown: (0, _chainedFunction2.default)(onMouseDown, function (event) {
                    if (disabled) {
                        return;
                    }
                    press(event);
                }),
                onTouchStart: (0, _chainedFunction2.default)(onTouchStart, function (event) {
                    if (disabled) {
                        return;
                    }
                    press(event);
                }),
                onTouchCancel: (0, _chainedFunction2.default)(onTouchCancel, function (event) {
                    if (disabled) {
                        return;
                    }
                    release(event);
                }),
                onTouchEnd: (0, _chainedFunction2.default)(onTouchEnd, function (event) {
                    if (disabled) {
                        return;
                    }
                    release(event);
                })
            }));
        }
    }]);

    return Repeatable;
}(_react.PureComponent), _class.propTypes = {
    // A custom element for this component.
    componentClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

    // Set it to true to disable event actions.
    disabled: _propTypes2.default.bool,

    // The time (in milliseconds) to wait before the first hold action is being triggered.
    repeatDelay: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

    // The time interval (in milliseconds) on how often to trigger a hold action.
    repeatInterval: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

    // The number of times the hold action will take place. A zero value will disable the repeat counter.
    repeatCount: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

    // Callback fired when the mousedown or touchstart event is triggered.
    onPress: _propTypes2.default.func,

    // Callback fired once before the first hold action.
    onHoldStart: _propTypes2.default.func,

    // Callback fired mutiple times while holding down.
    onHold: _propTypes2.default.func,

    // Callback fired once after the last hold action.
    onHoldEnd: _propTypes2.default.func,

    // Callback fired when the mouseup, touchcancel, or touchend event is triggered.
    onRelease: _propTypes2.default.func,

    onMouseDown: _propTypes2.default.func,
    onTouchStart: _propTypes2.default.func,
    onTouchCancel: _propTypes2.default.func,
    onTouchEnd: _propTypes2.default.func
}, _class.defaultProps = {
    componentClass: 'div',
    disabled: false,
    repeatDelay: 500,
    repeatInterval: 32,
    repeatCount: 0
}, _temp2);
exports.default = Repeatable;