"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _set2 = _interopRequireDefault(require("lodash/set"));

var _MarlinLineParserResultEcho = _interopRequireDefault(require("./MarlinLineParserResultEcho"));

var _MarlinLineParserResultError = _interopRequireDefault(require("./MarlinLineParserResultError"));

var _MarlinLineParserResultFirmware = _interopRequireDefault(require("./MarlinLineParserResultFirmware"));

var _MarlinLineParserResultOk = _interopRequireDefault(require("./MarlinLineParserResultOk"));

var _MarlinLineParserResultPosition = _interopRequireDefault(require("./MarlinLineParserResultPosition"));

var _MarlinLineParserResultStart = _interopRequireDefault(require("./MarlinLineParserResultStart"));

var _MarlinLineParserResultTemperature = _interopRequireDefault(require("./MarlinLineParserResultTemperature"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MarlinLineParser = /*#__PURE__*/function () {
  function MarlinLineParser() {
    _classCallCheck(this, MarlinLineParser);
  }

  _createClass(MarlinLineParser, [{
    key: "parse",
    value: function parse(line) {
      var parsers = [// start
      _MarlinLineParserResultStart["default"], // FIRMWARE_NAME:Marlin 1.1.0 (Github) SOURCE_CODE_URL:https://github.com/MarlinFirmware/Marlin PROTOCOL_VERSION:1.0 MACHINE_TYPE:RepRap EXTRUDER_COUNT:1 UUID:cede2a2f-41a2-4748-9b12-c55c62f367ff
      _MarlinLineParserResultFirmware["default"], // X:0.00 Y:0.00 Z:0.00 E:0.00 Count X:0 Y:0 Z:0
      _MarlinLineParserResultPosition["default"], // ok
      _MarlinLineParserResultOk["default"], // echo:
      _MarlinLineParserResultEcho["default"], // Error:Printer halted. kill() called!
      _MarlinLineParserResultError["default"], // ok T:293.0 /0.0 B:25.9 /0.0 @:0 B@:0
      //  T:293.0 /0.0 B:25.9 /0.0 @:0 B@:0
      _MarlinLineParserResultTemperature["default"]];

      for (var _i = 0, _parsers = parsers; _i < _parsers.length; _i++) {
        var parser = _parsers[_i];
        var result = parser.parse(line);

        if (result) {
          (0, _set2["default"])(result, 'payload.raw', line);
          return result;
        }
      }

      return {
        type: null,
        payload: {
          raw: line
        }
      };
    }
  }]);

  return MarlinLineParser;
}();

var _default = MarlinLineParser;
exports["default"] = _default;