"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _events = _interopRequireDefault(require("events"));

var _MarlinLineParser = _interopRequireDefault(require("./MarlinLineParser"));

var _MarlinLineParserResultStart = _interopRequireDefault(require("./MarlinLineParserResultStart"));

var _MarlinLineParserResultFirmware = _interopRequireDefault(require("./MarlinLineParserResultFirmware"));

var _MarlinLineParserResultPosition = _interopRequireDefault(require("./MarlinLineParserResultPosition"));

var _MarlinLineParserResultOk = _interopRequireDefault(require("./MarlinLineParserResultOk"));

var _MarlinLineParserResultEcho = _interopRequireDefault(require("./MarlinLineParserResultEcho"));

var _MarlinLineParserResultError = _interopRequireDefault(require("./MarlinLineParserResultError"));

var _MarlinLineParserResultTemperature = _interopRequireDefault(require("./MarlinLineParserResultTemperature"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MarlinRunner = /*#__PURE__*/function (_events$EventEmitter) {
  _inherits(MarlinRunner, _events$EventEmitter);

  var _super = _createSuper(MarlinRunner);

  function MarlinRunner() {
    var _this;

    _classCallCheck(this, MarlinRunner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      pos: {
        x: '0.000',
        y: '0.000',
        z: '0.000',
        e: '0.000'
      },
      modal: {
        motion: 'G0',
        // G0, G1, G2, G3, G38.2, G38.3, G38.4, G38.5, G80
        wcs: 'G54',
        // G54, G55, G56, G57, G58, G59
        plane: 'G17',
        // G17: xy-plane, G18: xz-plane, G19: yz-plane
        units: 'G21',
        // G20: Inches, G21: Millimeters
        distance: 'G90',
        // G90: Absolute, G91: Relative
        feedrate: 'G94',
        // G93: Inverse time mode, G94: Units per minute
        program: 'M0',
        // M0, M1, M2, M30
        spindle: 'M5',
        // M3: Spindle (cw), M4: Spindle (ccw), M5: Spindle off
        coolant: 'M9' // M7: Mist coolant, M8: Flood coolant, M9: Coolant off, [M7,M8]: Both on

      },
      ovF: 100,
      ovS: 100,
      extruder: {},
      // { deg, degTarget, power }
      heatedBed: {},
      // { deg, degTarget, power }
      rapidFeedrate: 0,
      // Related to G0
      feedrate: 0,
      // Related to G1, G2, G3, G38.2, G38.3, G38.4, G38.5, G80
      spindle: 0 // Related to M3, M4, M5

    });

    _defineProperty(_assertThisInitialized(_this), "settings", {});

    _defineProperty(_assertThisInitialized(_this), "parser", new _MarlinLineParser["default"]());

    return _this;
  }

  _createClass(MarlinRunner, [{
    key: "parse",
    value: function parse(data) {
      data = ('' + data).replace(/\s+$/, '');

      if (!data) {
        return;
      }

      this.emit('raw', {
        raw: data
      });
      var result = this.parser.parse(data) || {};
      var type = result.type,
          payload = result.payload;

      if (type === _MarlinLineParserResultStart["default"]) {
        this.emit('start', payload);
        return;
      }

      if (type === _MarlinLineParserResultFirmware["default"]) {
        var firmwareName = payload.firmwareName,
            protocolVersion = payload.protocolVersion,
            machineType = payload.machineType,
            extruderCount = payload.extruderCount,
            uuid = payload.uuid;

        var nextSettings = _objectSpread(_objectSpread({}, this.settings), {}, {
          firmwareName: firmwareName,
          protocolVersion: protocolVersion,
          machineType: machineType,
          extruderCount: extruderCount,
          uuid: uuid
        });

        if (!(0, _isEqual2["default"])(this.settings, nextSettings)) {
          this.settings = nextSettings; // enforce change
        }

        this.emit('firmware', payload);
        return;
      }

      if (type === _MarlinLineParserResultPosition["default"]) {
        var nextState = _objectSpread(_objectSpread({}, this.state), {}, {
          pos: _objectSpread(_objectSpread({}, this.state.pos), payload.pos)
        });

        if (!(0, _isEqual2["default"])(this.state.pos, nextState.pos)) {
          this.state = nextState; // enforce change
        }

        this.emit('pos', payload);
        return;
      }

      if (type === _MarlinLineParserResultOk["default"]) {
        this.emit('ok', payload);
        return;
      }

      if (type === _MarlinLineParserResultError["default"]) {
        this.emit('error', payload);
        return;
      }

      if (type === _MarlinLineParserResultEcho["default"]) {
        this.emit('echo', payload);
        return;
      }

      if (type === _MarlinLineParserResultTemperature["default"]) {
        var _nextState = _objectSpread(_objectSpread({}, this.state), {}, {
          extruder: _objectSpread(_objectSpread({}, this.state.extruder), payload.extruder),
          heatedBed: _objectSpread(_objectSpread({}, this.state.heatedBed), payload.heatedBed)
        });

        if (!(0, _isEqual2["default"])(this.state.extruder, _nextState.extruder) || !(0, _isEqual2["default"])(this.state.heatedBed, _nextState.heatedBed)) {
          this.state = _nextState; // enforce change
        } // The 'ok' event (w/ empty response) should follow the 'temperature' event


        this.emit('temperature', payload); // > M105
        // < ok T:27.0 /0.0 B:26.8 /0.0 B@:0 @:0

        if (payload.ok) {
          // Emit an 'ok' event with empty response
          this.emit('ok');
        }

        return;
      }

      if (data.length > 0) {
        this.emit('others', payload);
        return;
      }
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return (0, _get2["default"])(state, 'pos', {});
    }
  }, {
    key: "getModalGroup",
    value: function getModalGroup() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return (0, _get2["default"])(state, 'modal', {});
    }
  }, {
    key: "getTool",
    value: function getTool() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      // Not supported
      return 0;
    }
  }, {
    key: "isAlarm",
    value: function isAlarm() {
      // Not supported
      return false;
    }
  }, {
    key: "isIdle",
    value: function isIdle() {
      // Not supported
      return false;
    }
  }]);

  return MarlinRunner;
}(_events["default"].EventEmitter);

var _default = MarlinRunner;
exports["default"] = _default;