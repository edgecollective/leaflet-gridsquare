"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ensureArray = _interopRequireDefault(require("ensure-array"));

var _gcodeParser = require("gcode-parser");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var fromPairs = function fromPairs(pairs) {
  var index = -1;
  var length = !pairs ? 0 : pairs.length;
  var result = {};

  while (++index < length) {
    var pair = pairs[index];
    result[pair[0]] = pair[1];
  }

  return result;
};

var partitionWordsByGroup = function partitionWordsByGroup() {
  var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var groups = [];

  for (var i = 0; i < words.length; ++i) {
    var word = words[i];
    var letter = word[0];

    if (letter === 'G' || letter === 'M') {
      groups.push([word]);
      continue;
    }

    if (groups.length > 0) {
      groups[groups.length - 1].push(word);
    } else {
      groups.push([word]);
    }
  }

  return groups;
};

var interpret = function () {
  var cmd = '';
  return function (line, callback) {
    var data = (0, _gcodeParser.parseLine)(line);
    var groups = partitionWordsByGroup((0, _ensureArray["default"])(data.words));

    for (var i = 0; i < groups.length; ++i) {
      var words = groups[i];
      var word = words[0] || [];
      var letter = word[0];
      var arg = word[1];

      if (letter === 'G' || letter === 'M') {
        cmd = letter + arg;
        var params = fromPairs(words.slice(1));
        callback(cmd, params);
      } else {
        // Use previous command if the line does not start with Gxx or Mxx
        // G0 XZ0.25
        //   X-0.5 Y0
        //   Z0.1
        var _params = fromPairs(words);

        callback(cmd, _params);
      }
    }
  };
}();

var _default = interpret;
exports["default"] = _default;