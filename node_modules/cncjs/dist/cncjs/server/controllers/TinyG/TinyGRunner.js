"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _each2 = _interopRequireDefault(require("lodash/each"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _set2 = _interopRequireDefault(require("lodash/set"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _events = _interopRequireDefault(require("events"));

var _ensureArray = _interopRequireDefault(require("ensure-array"));

var _TinyGLineParser = _interopRequireDefault(require("./TinyGLineParser"));

var _TinyGLineParserResultMotorTimeout = _interopRequireDefault(require("./TinyGLineParserResultMotorTimeout"));

var _TinyGLineParserResultOverrides = _interopRequireDefault(require("./TinyGLineParserResultOverrides"));

var _TinyGLineParserResultPowerManagement = _interopRequireDefault(require("./TinyGLineParserResultPowerManagement"));

var _TinyGLineParserResultQueueReports = _interopRequireDefault(require("./TinyGLineParserResultQueueReports"));

var _TinyGLineParserResultReceiveReports = _interopRequireDefault(require("./TinyGLineParserResultReceiveReports"));

var _TinyGLineParserResultStatusReports = _interopRequireDefault(require("./TinyGLineParserResultStatusReports"));

var _TinyGLineParserResultSystemSettings = _interopRequireDefault(require("./TinyGLineParserResultSystemSettings"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TinyGRunner = /*#__PURE__*/function (_events$EventEmitter) {
  _inherits(TinyGRunner, _events$EventEmitter);

  var _super = _createSuper(TinyGRunner);

  function TinyGRunner() {
    var _this;

    _classCallCheck(this, TinyGRunner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      // Motor Timeout
      mt: 0,
      // Power Management
      pwr: {// {"1":0,"2":0,"3":0,"4":0}
      },
      // Queue Reports
      qr: 0,
      // Status Reports
      sr: {
        machineState: '',
        velocity: 0,
        line: 0,
        feedrate: 0,
        mpos: {
          x: '0.000',
          y: '0.000',
          z: '0.000'
        },
        wpos: {
          x: '0.000',
          y: '0.000',
          z: '0.000'
        },
        modal: {
          motion: '',
          // G0, G1, G2, G3, G38.2, G38.3, G38.4, G38.5, G80
          wcs: '',
          // G54, G55, G56, G57, G58, G59
          plane: '',
          // G17: xy-plane, G18: xz-plane, G19: yz-plane
          units: '',
          // G20: Inches, G21: Millimeters
          distance: '',
          // G90: Absolute, G91: Relative
          feedrate: '',
          // G93: Inverse time mode, G94: Units per minute
          path: '',
          // G61: Exact path mode, G61.1: Exact stop mode, G64: Continuous mode
          spindle: '',
          // M3: Spindle (cw), M4: Spindle (ccw), M5: Spindle off
          coolant: '' // M7: Mist coolant, M8: Flood coolant, M9: Coolant off, [M7,M8]: Both on

        },
        tool: 0,
        spe: 0,
        // [edge-082.10] Spindle enable
        spd: 0,
        // [edge-082.10] Spindle direction
        spc: 0,
        // [edge-101.03] Spindle control
        sps: 0 // [edge-082.10] Spindle speed

      }
    });

    _defineProperty(_assertThisInitialized(_this), "settings", {
      // Identification Parameters
      // https://github.com/synthetos/g2/wiki/Configuring-0.99-System-Groups#identification-parameters
      fb: 0,
      // firmware build
      fbs: '',
      // firmware build string
      fbc: '',
      // firmware build config
      fv: 0,
      // firmware version
      hp: 0,
      // hardware platform: 1=Xmega, 2=Due, 3=v9(ARM)
      hv: 0,
      // hardware version
      id: '',
      // board ID
      mfo: 1,
      // manual feedrate override
      mto: 1,
      // manual traverse override
      sso: 1 // spindle speed override

    });

    _defineProperty(_assertThisInitialized(_this), "footer", {
      revision: 0,
      statusCode: 0,
      // https://github.com/synthetos/g2/wiki/Status-Codes
      rxBufferInfo: 0
    });

    _defineProperty(_assertThisInitialized(_this), "plannerBufferPoolSize", 0);

    _defineProperty(_assertThisInitialized(_this), "parser", new _TinyGLineParser["default"]());

    return _this;
  }

  _createClass(TinyGRunner, [{
    key: "parse",
    value: function parse(data) {
      data = ('' + data).replace(/\s+$/, '');

      if (!data) {
        return;
      }

      this.emit('raw', {
        raw: data
      });

      if (data.match(/^{/)) {
        try {
          data = JSON.parse(data);
        } catch (err) {
          data = {};
        }

        var result = this.parser.parse(data) || {};
        var type = result.type,
            payload = result.payload;

        if (type === _TinyGLineParserResultMotorTimeout["default"]) {
          var _payload$mt = payload.mt,
              mt = _payload$mt === void 0 ? this.state.mt : _payload$mt;

          if (this.state.mt !== mt) {
            this.state = _objectSpread(_objectSpread({}, this.state), {}, {
              mt: mt
            });
          }

          this.emit('mt', payload.mt);
        } else if (type === _TinyGLineParserResultPowerManagement["default"]) {
          var _payload$pwr = payload.pwr,
              pwr = _payload$pwr === void 0 ? this.state.pwr : _payload$pwr;

          if (!(0, _isEqual2["default"])(this.state.pwr, pwr)) {
            this.state = _objectSpread(_objectSpread({}, this.state), {}, {
              pwr: pwr
            });
          }

          this.emit('pwr', payload.pwr);
        } else if (type === _TinyGLineParserResultQueueReports["default"]) {
          var qr = payload.qr,
              qi = payload.qi,
              qo = payload.qo; // The planner buffer pool size will be checked every time the planner buffer changes

          if (qr > this.plannerBufferPoolSize) {
            this.plannerBufferPoolSize = qr;
          }

          if (this.state.qr !== qr) {
            this.state = _objectSpread(_objectSpread({}, this.state), {}, {
              qr: qr
            });
          }

          this.emit('qr', {
            qr: qr,
            qi: qi,
            qo: qo
          });
        } else if (type === _TinyGLineParserResultStatusReports["default"]) {
          // https://github.com/synthetos/TinyG/wiki/TinyG-Status-Reports
          // https://github.com/synthetos/g2/wiki/Status-Reports
          var keymaps = {
            // machine state
            'stat': 'machineState',
            // runtime line number
            'line': 'line',
            // current velocity
            'vel': 'velocity',
            // feed rate
            'feed': 'feedrate',
            // units mode
            'unit': function unit(target, val) {
              var _TINYG_GCODE_UNITS_G;

              var gcode = (_TINYG_GCODE_UNITS_G = {}, _defineProperty(_TINYG_GCODE_UNITS_G, _constants.TINYG_GCODE_UNITS_G20, 'G20'), _defineProperty(_TINYG_GCODE_UNITS_G, _constants.TINYG_GCODE_UNITS_G21, 'G21'), _TINYG_GCODE_UNITS_G)[val] || '';
              (0, _set2["default"])(target, 'modal.units', gcode);
            },
            // coordinate system
            'coor': function coor(target, val) {
              var _TINYG_GCODE_COORDINA;

              var gcode = (_TINYG_GCODE_COORDINA = {}, _defineProperty(_TINYG_GCODE_COORDINA, _constants.TINYG_GCODE_COORDINATE_G53, 'G53'), _defineProperty(_TINYG_GCODE_COORDINA, _constants.TINYG_GCODE_COORDINATE_G54, 'G54'), _defineProperty(_TINYG_GCODE_COORDINA, _constants.TINYG_GCODE_COORDINATE_G55, 'G55'), _defineProperty(_TINYG_GCODE_COORDINA, _constants.TINYG_GCODE_COORDINATE_G56, 'G56'), _defineProperty(_TINYG_GCODE_COORDINA, _constants.TINYG_GCODE_COORDINATE_G57, 'G57'), _defineProperty(_TINYG_GCODE_COORDINA, _constants.TINYG_GCODE_COORDINATE_G58, 'G58'), _defineProperty(_TINYG_GCODE_COORDINA, _constants.TINYG_GCODE_COORDINATE_G59, 'G59'), _TINYG_GCODE_COORDINA)[val] || '';
              (0, _set2["default"])(target, 'modal.wcs', gcode);
            },
            // motion mode
            'momo': function momo(target, val) {
              var _TINYG_GCODE_MOTION_G;

              var gcode = (_TINYG_GCODE_MOTION_G = {}, _defineProperty(_TINYG_GCODE_MOTION_G, _constants.TINYG_GCODE_MOTION_G0, 'G0'), _defineProperty(_TINYG_GCODE_MOTION_G, _constants.TINYG_GCODE_MOTION_G1, 'G1'), _defineProperty(_TINYG_GCODE_MOTION_G, _constants.TINYG_GCODE_MOTION_G2, 'G2'), _defineProperty(_TINYG_GCODE_MOTION_G, _constants.TINYG_GCODE_MOTION_G3, 'G3'), _defineProperty(_TINYG_GCODE_MOTION_G, _constants.TINYG_GCODE_MOTION_G80, 'G80'), _TINYG_GCODE_MOTION_G)[val] || '';
              (0, _set2["default"])(target, 'modal.motion', gcode);
            },
            // plane select
            'plan': function plan(target, val) {
              var _TINYG_GCODE_PLANE_G;

              var gcode = (_TINYG_GCODE_PLANE_G = {}, _defineProperty(_TINYG_GCODE_PLANE_G, _constants.TINYG_GCODE_PLANE_G17, 'G17'), _defineProperty(_TINYG_GCODE_PLANE_G, _constants.TINYG_GCODE_PLANE_G18, 'G18'), _defineProperty(_TINYG_GCODE_PLANE_G, _constants.TINYG_GCODE_PLANE_G19, 'G19'), _TINYG_GCODE_PLANE_G)[val] || '';
              (0, _set2["default"])(target, 'modal.plane', gcode);
            },
            // path control mode
            'path': function path(target, val) {
              var _TINYG_GCODE_PATH_G;

              var gcode = (_TINYG_GCODE_PATH_G = {}, _defineProperty(_TINYG_GCODE_PATH_G, _constants.TINYG_GCODE_PATH_G61, 'G61'), _defineProperty(_TINYG_GCODE_PATH_G, _constants.TINYG_GCODE_PATH_G61_1, 'G61.1'), _defineProperty(_TINYG_GCODE_PATH_G, _constants.TINYG_GCODE_PATH_G64, 'G64'), _TINYG_GCODE_PATH_G)[val] || '';
              (0, _set2["default"])(target, 'modal.path', gcode);
            },
            // distance mode
            'dist': function dist(target, val) {
              var _TINYG_GCODE_DISTANCE;

              var gcode = (_TINYG_GCODE_DISTANCE = {}, _defineProperty(_TINYG_GCODE_DISTANCE, _constants.TINYG_GCODE_DISTANCE_G90, 'G90'), _defineProperty(_TINYG_GCODE_DISTANCE, _constants.TINYG_GCODE_DISTANCE_G91, 'G91'), _TINYG_GCODE_DISTANCE)[val] || '';
              (0, _set2["default"])(target, 'modal.distance', gcode);
            },
            // arc distance mode
            'admo': function admo(target, val) {
              var _TINYG_GCODE_DISTANCE2;

              var gcode = (_TINYG_GCODE_DISTANCE2 = {}, _defineProperty(_TINYG_GCODE_DISTANCE2, _constants.TINYG_GCODE_DISTANCE_G90, 'G90'), _defineProperty(_TINYG_GCODE_DISTANCE2, _constants.TINYG_GCODE_DISTANCE_G91, 'G91'), _TINYG_GCODE_DISTANCE2)[val] || '';
              (0, _set2["default"])(target, 'modal.arcdistance', gcode);
            },
            // feed rate mode
            'frmo': function frmo(target, val) {
              var _TINYG_GCODE_FEEDRATE;

              var gcode = (_TINYG_GCODE_FEEDRATE = {}, _defineProperty(_TINYG_GCODE_FEEDRATE, _constants.TINYG_GCODE_FEEDRATE_G93, 'G93'), _defineProperty(_TINYG_GCODE_FEEDRATE, _constants.TINYG_GCODE_FEEDRATE_G94, 'G94'), _defineProperty(_TINYG_GCODE_FEEDRATE, _constants.TINYG_GCODE_FEEDRATE_G95, 'G95'), _TINYG_GCODE_FEEDRATE)[val] || '';
              (0, _set2["default"])(target, 'modal.feedrate', gcode);
            },
            // active tool
            'tool': function tool(target, val) {
              (0, _set2["default"])(target, 'tool', val);
            },
            // [edge-082.10] Spindle enable (removed in edge-101.03)
            'spe': function spe(target, val) {
              (0, _set2["default"])(target, 'spe', val);
              var spe = (0, _get2["default"])(target, 'spe', 0);
              var spd = (0, _get2["default"])(target, 'spd', 0);

              if (!spe) {
                (0, _set2["default"])(target, 'modal.spindle', 'M5');
              } else {
                (0, _set2["default"])(target, 'modal.spindle', spd === 0 ? 'M3' : 'M4');
              }
            },
            // [edge-082.10] Spindle direction (removed in edge-101.03)
            'spd': function spd(target, val) {
              (0, _set2["default"])(target, 'spd', val);
              var spe = (0, _get2["default"])(target, 'spe', 0);
              var spd = (0, _get2["default"])(target, 'spd', 0);

              if (!spe) {
                (0, _set2["default"])(target, 'modal.spindle', 'M5');
              } else {
                (0, _set2["default"])(target, 'modal.spindle', spd === 0 ? 'M3' : 'M4');
              }
            },
            // [edge-101.03] Spindle control
            // 0 = OFF, 1 = CW, 2 = CCW
            'spc': function spc(target, val) {
              if (val === 0) {
                // OFF
                (0, _set2["default"])(target, 'modal.spindle', 'M5');
              } else if (val === 1) {
                // CW
                (0, _set2["default"])(target, 'modal.spindle', 'M3');
              } else if (val === 2) {
                // CCW
                (0, _set2["default"])(target, 'modal.spindle', 'M4');
              }
            },
            // [edge-082.10] Spindle speed
            'sps': function sps(target, val) {
              (0, _set2["default"])(target, 'sps', val);
            },
            // [edge-082.10] Mist coolant
            'com': function com(target, val) {
              if (val === 0) {
                // Coolant Off
                (0, _set2["default"])(target, 'modal.coolant', 'M9');
                return;
              }

              var data = (0, _ensureArray["default"])((0, _get2["default"])(target, 'modal.coolant', ''));

              if (data.indexOf('M8') >= 0) {
                // Mist + Flood
                (0, _set2["default"])(target, 'modal.coolant', ['M7', 'M8']);
                return;
              } // Mist


              (0, _set2["default"])(target, 'modal.coolant', 'M7');
            },
            // [edge-082.10] Flood coolant
            'cof': function cof(target, val) {
              if (val === 0) {
                // Coolant Off
                (0, _set2["default"])(target, 'modal.coolant', 'M9');
                return;
              }

              var data = (0, _ensureArray["default"])((0, _get2["default"])(target, 'modal.coolant', ''));

              if (data.indexOf('M7') >= 0) {
                // Mist + Flood
                (0, _set2["default"])(target, 'modal.coolant', ['M7', 'M8']);
                return;
              } // Flood


              (0, _set2["default"])(target, 'modal.coolant', 'M8');
            },
            // Work Position
            // {posx: ... through {posa:... are reported in the currently
            // active Units mode (G20/G21), and also apply any offsets,
            // including coordinate system selection, G92, and tool offsets.
            // These are provided to drive digital readouts
            'posx': 'wpos.x',
            'posy': 'wpos.y',
            'posz': 'wpos.z',
            'posa': 'wpos.a',
            'posb': 'wpos.b',
            'posc': 'wpos.c',
            // Machine Position
            // {mpox: ... through {mpoa:... are reported in the machine's
            // internal coordinate system (canonical machine) and will always
            // be in millimeters with no offsets.
            // These are provided to drive graphical displays so they do not
            // have to be aware of Gcode Units mode or any offsets in effect.
            'mpox': 'mpos.x',
            'mpoy': 'mpos.y',
            'mpoz': 'mpos.z',
            'mpoa': 'mpos.a',
            'mpob': 'mpos.b',
            'mpoc': 'mpos.c'
          };

          var sr = _objectSpread(_objectSpread({}, this.state.sr), {}, {
            modal: _objectSpread({}, this.state.sr.modal),
            wpos: _objectSpread({}, this.state.sr.wpos),
            mpos: _objectSpread({}, this.state.sr.mpos)
          });

          (0, _each2["default"])(keymaps, function (target, key) {
            if (typeof target === 'string') {
              var val = (0, _get2["default"])(payload.sr, key);

              if (val !== undefined) {
                (0, _set2["default"])(sr, target, val);
              }
            }

            if (typeof target === 'function') {
              var _val = (0, _get2["default"])(payload.sr, key);

              if (_val !== undefined) {
                target(sr, _val);
              }
            }
          });

          if (!(0, _isEqual2["default"])(this.state.sr, sr)) {
            this.state = _objectSpread(_objectSpread({}, this.state), {}, {
              sr: sr
            });
          }

          this.emit('sr', payload.sr);
        } else if (type === _TinyGLineParserResultSystemSettings["default"]) {
          this.settings = _objectSpread(_objectSpread({}, this.settings), payload.sys);
          this.emit('sys', payload.sys);
        } else if (type === _TinyGLineParserResultOverrides["default"]) {
          var _payload$mfo = payload.mfo,
              mfo = _payload$mfo === void 0 ? this.settings.mfo : _payload$mfo,
              _payload$mto = payload.mto,
              mto = _payload$mto === void 0 ? this.settings.mto : _payload$mto,
              _payload$sso = payload.sso,
              sso = _payload$sso === void 0 ? this.settings.sso : _payload$sso;
          this.settings = _objectSpread(_objectSpread({}, this.settings), {}, {
            mfo: mfo,
            mto: mto,
            sso: sso
          });
          this.emit('ov', {
            mfo: mfo,
            mto: mto,
            sso: sso
          });
        } else if (type === _TinyGLineParserResultReceiveReports["default"]) {
          var settings = {};

          for (var key in payload.r) {
            if (key in this.settings) {
              settings[key] = payload.r[key];
            }
          }

          if (Object.keys(settings).length > 0) {
            this.settings = _objectSpread(_objectSpread({}, this.settings), settings);
          }

          this.emit('r', payload.r);
        }

        if (payload.f && payload.f.length > 0) {
          this.footer.revision = payload.f[0];
          this.footer.statusCode = payload.f[1];
          this.footer.rxBufferInfo = payload.f[2];
          this.emit('f', payload.f);
        }
      }
    }
  }, {
    key: "getMachinePosition",
    value: function getMachinePosition() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return (0, _get2["default"])(state, 'sr.mpos', {});
    }
  }, {
    key: "getWorkPosition",
    value: function getWorkPosition() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return (0, _get2["default"])(state, 'sr.wpos', {});
    }
  }, {
    key: "getModalGroup",
    value: function getModalGroup() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return (0, _get2["default"])(state, 'sr.modal', {});
    }
  }, {
    key: "getTool",
    value: function getTool() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return Number((0, _get2["default"])(state, 'tool')) || 0;
    }
  }, {
    key: "isAlarm",
    value: function isAlarm() {
      var machineState = (0, _get2["default"])(this.state, 'sr.machineState');
      return machineState === _constants.TINYG_MACHINE_STATE_ALARM;
    }
  }, {
    key: "isIdle",
    value: function isIdle() {
      var machineState = (0, _get2["default"])(this.state, 'sr.machineState');
      return machineState === _constants.TINYG_MACHINE_STATE_READY || machineState === _constants.TINYG_MACHINE_STATE_STOP || machineState === _constants.TINYG_MACHINE_STATE_END;
    }
  }]);

  return TinyGRunner;
}(_events["default"].EventEmitter);

var _default = TinyGRunner;
exports["default"] = _default;