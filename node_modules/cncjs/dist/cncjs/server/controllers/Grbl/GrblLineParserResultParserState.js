"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ensureArray = _interopRequireDefault(require("ensure-array"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _find2 = _interopRequireDefault(require("lodash/find"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _includes2 = _interopRequireDefault(require("lodash/includes"));

var _set2 = _interopRequireDefault(require("lodash/set"));

var _trim2 = _interopRequireDefault(require("lodash/trim"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var GrblLineParserResultParserState = /*#__PURE__*/function () {
  function GrblLineParserResultParserState() {
    _classCallCheck(this, GrblLineParserResultParserState);
  }

  _createClass(GrblLineParserResultParserState, null, [{
    key: "parse",
    value: // * Grbl v0.9
    //   [G38.2 G54 G17 G21 G91 G94 M0 M5 M9 T0 F20. S0.]
    // * Grbl v1.1
    //   [GC:G0 G54 G17 G21 G90 G94 M0 M5 M9 T0 S0.0 F500.0]
    function parse(line) {
      var r = line.match(/^\[(?:GC:)?((?:[a-zA-Z][0-9]+(?:\.[0-9]*)?\s*)+)\]$/);

      if (!r) {
        return null;
      }

      var payload = {};
      var words = (0, _compact2["default"])(r[1].split(' ')).map(function (word) {
        return (0, _trim2["default"])(word);
      });

      var _loop = function _loop(i) {
        var word = words[i]; // Gx, Mx

        if (word.indexOf('G') === 0 || word.indexOf('M') === 0) {
          var _r = (0, _find2["default"])(_constants.GRBL_MODAL_GROUPS, function (group) {
            return (0, _includes2["default"])(group.modes, word);
          });

          if (!_r) {
            return "continue";
          }

          var prevWord = (0, _get2["default"])(payload, 'modal.' + _r.group, '');

          if (prevWord) {
            (0, _set2["default"])(payload, 'modal.' + _r.group, (0, _ensureArray["default"])(prevWord).concat(word));
          } else {
            (0, _set2["default"])(payload, 'modal.' + _r.group, word);
          }

          return "continue";
        } // T: tool number


        if (word.indexOf('T') === 0) {
          (0, _set2["default"])(payload, 'tool', word.substring(1));
          return "continue";
        } // F: feed rate


        if (word.indexOf('F') === 0) {
          (0, _set2["default"])(payload, 'feedrate', word.substring(1));
          return "continue";
        } // S: spindle speed


        if (word.indexOf('S') === 0) {
          (0, _set2["default"])(payload, 'spindle', word.substring(1));
          return "continue";
        }
      };

      for (var i = 0; i < words.length; ++i) {
        var _ret = _loop(i);

        if (_ret === "continue") continue;
      }

      return {
        type: GrblLineParserResultParserState,
        payload: payload
      };
    }
  }]);

  return GrblLineParserResultParserState;
}();

var _default = GrblLineParserResultParserState;
exports["default"] = _default;