"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _has2 = _interopRequireDefault(require("lodash/has"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

//https://github.com/grbl/grbl/blob/master/grbl/report.c
var GrblLineParserResultStatus = /*#__PURE__*/function () {
  function GrblLineParserResultStatus() {
    _classCallCheck(this, GrblLineParserResultStatus);
  }

  _createClass(GrblLineParserResultStatus, null, [{
    key: "parse",
    value: // * Grbl v0.9
    //   <Idle>
    //   <Idle,MPos:5.529,0.560,7.000,WPos:1.529,-5.440,-0.000>
    //   <Idle,MPos:5.529,0.560,7.000,0.000,WPos:1.529,-5.440,-0.000,0.000>
    //   <Idle,MPos:0.000,0.000,0.000,WPos:0.000,0.000,0.000,Buf:0,RX:0,Lim:000>
    //   <Idle,MPos:0.000,0.000,0.000,WPos:0.000,0.000,0.000,Buf:0,RX:0,Ln:0,F:0.>
    // * Grbl v1.1
    //   <Idle|MPos:3.000,2.000,0.000|FS:0,0>
    //   <Hold:0|MPos:5.000,2.000,0.000|FS:0,0>
    //   <Idle|MPos:5.000,2.000,0.000|FS:0,0|Ov:100,100,100>
    //   <Idle|MPos:5.000,2.000,0.000|FS:0,0|WCO:0.000,0.000,0.000>
    //   <Run|MPos:23.036,1.620,0.000|FS:500,0>
    function parse(line) {
      var r = line.match(/^<(.+)>$/);

      if (!r) {
        return null;
      }

      var payload = {};
      var pattern = /[a-zA-Z]+(:[0-9\.\-]+(,[0-9\.\-]+){0,5})?/g;
      var params = r[1].match(pattern);
      var result = {};
      {
        // Active State (v0.9, v1.1)
        // * Valid states types: Idle, Run, Hold, Jog, Alarm, Door, Check, Home, Sleep
        // * Sub-states may be included via : a colon delimiter and numeric code.
        // * Current sub-states are:
        //   - Hold:0 Hold complete. Ready to resume.
        //   - Hold:1 Hold in-progress. Reset will throw an alarm.
        //   - Door:0 Door closed. Ready to resume.
        //   - Door:1 Machine stopped. Door still ajar. Can't resume until closed.
        //   - Door:2 Door opened. Hold (or parking retract) in-progress. Reset will throw an alarm.
        //   - Door:3 Door closed and resuming. Restoring from park, if applicable. Reset will throw an alarm.
        var states = (params.shift() || '').split(':');
        payload.activeState = states[0] || '';
        payload.subState = Number(states[1] || '');
      }

      var _iterator = _createForOfIteratorHelper(params),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var param = _step.value;
          var nv = param.match(/^(.+):(.+)/);

          if (nv) {
            var type = nv[1];

            var _value = nv[2].split(',');

            result[type] = _value;
          }
        } // Machine Position (v0.9, v1.1)

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if ((0, _has2["default"])(result, 'MPos')) {
        var axes = ['x', 'y', 'z', 'a', 'b', 'c'];
        var mPos = (0, _get2["default"])(result, 'MPos', ['0.000', '0.000', '0.000']); // Defaults to [x, y, z]

        payload.mpos = {};

        for (var i = 0; i < mPos.length; ++i) {
          payload.mpos[axes[i]] = mPos[i];
        }
      } // Work Position (v0.9, v1.1)


      if ((0, _has2["default"])(result, 'WPos')) {
        var _axes = ['x', 'y', 'z', 'a', 'b', 'c'];
        var wPos = (0, _get2["default"])(result, 'WPos', ['0.000', '0.000', '0.000']); // Defaults to [x, y, z]

        payload.wpos = {};

        for (var _i = 0; _i < wPos.length; ++_i) {
          payload.wpos[_axes[_i]] = wPos[_i];
        }
      } // Work Coordinate Offset (v1.1)


      if ((0, _has2["default"])(result, 'WCO')) {
        var _axes2 = ['x', 'y', 'z', 'a', 'b', 'c'];
        var wco = (0, _get2["default"])(result, 'WCO', ['0.000', '0.000', '0.000']); // Defaults to [x, y, z]

        payload.wco = {};

        for (var _i2 = 0; _i2 < wco.length; ++_i2) {
          payload.wco[_axes2[_i2]] = wco[_i2];
        }
      } // Planner Buffer (v0.9)


      if ((0, _has2["default"])(result, 'Buf')) {
        payload.buf = payload.buf || {};
        payload.buf.planner = Number((0, _get2["default"])(result, 'Buf[0]', 0));
      } // RX Buffer (v0.9)


      if ((0, _has2["default"])(result, 'RX')) {
        payload.buf = payload.buf || {};
        payload.buf.rx = Number((0, _get2["default"])(result, 'RX[0]', 0));
      } // Buffer State (v1.1)
      // Bf:15,128. The first value is the number of available blocks in the planner buffer and the second is number of available bytes in the serial RX buffer.


      if ((0, _has2["default"])(result, 'Bf')) {
        payload.buf = payload.buf || {};
        payload.buf.planner = Number((0, _get2["default"])(result, 'Bf[0]', 0));
        payload.buf.rx = Number((0, _get2["default"])(result, 'Bf[1]', 0));
      } // Line Number (v0.9, v1.1)
      // Ln:99999 indicates line 99999 is currently being executed.


      if ((0, _has2["default"])(result, 'Ln')) {
        payload.ln = Number((0, _get2["default"])(result, 'Ln[0]', 0));
      } // Feed Rate (v0.9, v1.1)
      // F:500 contains real-time feed rate data as the value.
      // This appears only when VARIABLE_SPINDLE is disabled.


      if ((0, _has2["default"])(result, 'F')) {
        payload.feedrate = Number((0, _get2["default"])(result, 'F[0]', 0));
      } // Current Feed and Speed (v1.1)
      // FS:500,8000 contains real-time feed rate, followed by spindle speed, data as the values.


      if ((0, _has2["default"])(result, 'FS')) {
        payload.feedrate = Number((0, _get2["default"])(result, 'FS[0]', 0));
        payload.spindle = Number((0, _get2["default"])(result, 'FS[1]', 0));
      } // Limit Pins (v0.9)
      // X_AXIS is (1<<0) or bit 0
      // Y_AXIS is (1<<1) or bit 1
      // Z_AXIS is (1<<2) or bit 2


      if ((0, _has2["default"])(result, 'Lim')) {
        var value = Number((0, _get2["default"])(result, 'Lim[0]', 0));
        payload.pinState = [value & 1 << 0 ? 'X' : '', value & 1 << 1 ? 'Y' : '', value & 1 << 2 ? 'Z' : '', value & 1 << 2 ? 'A' : ''].join('');
      } // Input Pin State (v1.1)
      // * Pn:XYZPDHRS indicates which input pins Grbl has detected as 'triggered'.
      // * Each letter of XYZPDHRS denotes a particular 'triggered' input pin.
      //   - X Y Z XYZ limit pins, respectively
      //   - P the probe pin.
      //   - D H R S the door, hold, soft-reset, and cycle-start pins, respectively.
      //   - Example: Pn:PZ indicates the probe and z-limit pins are 'triggered'.
      //   - Note: A may be added in later versions for an A-axis limit pin.


      if ((0, _has2["default"])(result, 'Pn')) {
        payload.pinState = (0, _get2["default"])(result, 'Pn[0]', '');
      } // Override Values (v1.1)
      // Ov:100,100,100 indicates current override values in percent of programmed values for feed, rapids, and spindle speed, respectively.


      if ((0, _has2["default"])(result, 'Ov')) {
        payload.ov = (0, _get2["default"])(result, 'Ov', []).map(function (v) {
          return Number(v);
        });
      } // Accessory State (v1.1)
      // * A:SFM indicates the current state of accessory machine components, such as the spindle and coolant.
      // * Each letter after A: denotes a particular state. When it appears, the state is enabled. When it does not appear, the state is disabled.
      //   - S indicates spindle is enabled in the CW direction. This does not appear with C.
      //   - C indicates spindle is enabled in the CCW direction. This does not appear with S.
      //   - F indicates flood coolant is enabled.
      //   - M indicates mist coolant is enabled.


      if ((0, _has2["default"])(result, 'A')) {
        payload.accessoryState = (0, _get2["default"])(result, 'A[0]', '');
      }

      return {
        type: GrblLineParserResultStatus,
        payload: payload
      };
    }
  }]);

  return GrblLineParserResultStatus;
}();

var _default = GrblLineParserResultStatus;
exports["default"] = _default;