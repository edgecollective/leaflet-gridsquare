"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _each2 = _interopRequireDefault(require("lodash/each"));

var _has2 = _interopRequireDefault(require("lodash/has"));

var _events = _interopRequireDefault(require("events"));

var _decimalPlaces = _interopRequireDefault(require("../../lib/decimal-places"));

var _GrblLineParser = _interopRequireDefault(require("./GrblLineParser"));

var _GrblLineParserResultStatus = _interopRequireDefault(require("./GrblLineParserResultStatus"));

var _GrblLineParserResultOk = _interopRequireDefault(require("./GrblLineParserResultOk"));

var _GrblLineParserResultError = _interopRequireDefault(require("./GrblLineParserResultError"));

var _GrblLineParserResultAlarm = _interopRequireDefault(require("./GrblLineParserResultAlarm"));

var _GrblLineParserResultParserState = _interopRequireDefault(require("./GrblLineParserResultParserState"));

var _GrblLineParserResultParameters = _interopRequireDefault(require("./GrblLineParserResultParameters"));

var _GrblLineParserResultFeedback = _interopRequireDefault(require("./GrblLineParserResultFeedback"));

var _GrblLineParserResultSettings = _interopRequireDefault(require("./GrblLineParserResultSettings"));

var _GrblLineParserResultStartup = _interopRequireDefault(require("./GrblLineParserResultStartup"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GrblRunner = /*#__PURE__*/function (_events$EventEmitter) {
  _inherits(GrblRunner, _events$EventEmitter);

  var _super = _createSuper(GrblRunner);

  function GrblRunner() {
    var _this;

    _classCallCheck(this, GrblRunner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      status: {
        activeState: '',
        mpos: {
          x: '0.000',
          y: '0.000',
          z: '0.000'
        },
        wpos: {
          x: '0.000',
          y: '0.000',
          z: '0.000'
        },
        ov: []
      },
      parserstate: {
        modal: {
          motion: 'G0',
          // G0, G1, G2, G3, G38.2, G38.3, G38.4, G38.5, G80
          wcs: 'G54',
          // G54, G55, G56, G57, G58, G59
          plane: 'G17',
          // G17: xy-plane, G18: xz-plane, G19: yz-plane
          units: 'G21',
          // G20: Inches, G21: Millimeters
          distance: 'G90',
          // G90: Absolute, G91: Relative
          feedrate: 'G94',
          // G93: Inverse time mode, G94: Units per minute
          program: 'M0',
          // M0, M1, M2, M30
          spindle: 'M5',
          // M3: Spindle (cw), M4: Spindle (ccw), M5: Spindle off
          coolant: 'M9' // M7: Mist coolant, M8: Flood coolant, M9: Coolant off, [M7,M8]: Both on

        },
        tool: '',
        feedrate: '',
        spindle: ''
      }
    });

    _defineProperty(_assertThisInitialized(_this), "settings", {
      version: '',
      parameters: {},
      settings: {}
    });

    _defineProperty(_assertThisInitialized(_this), "parser", new _GrblLineParser["default"]());

    return _this;
  }

  _createClass(GrblRunner, [{
    key: "parse",
    value: function parse(data) {
      var _this2 = this;

      data = ('' + data).replace(/\s+$/, '');

      if (!data) {
        return;
      }

      this.emit('raw', {
        raw: data
      });
      var result = this.parser.parse(data) || {};
      var type = result.type,
          payload = result.payload;

      if (type === _GrblLineParserResultStatus["default"]) {
        // Grbl v1.1
        // WCO:0.000,10.000,2.500
        // A current work coordinate offset is now sent to easily convert
        // between position vectors, where WPos = MPos - WCO for each axis.
        if ((0, _has2["default"])(payload, 'mpos') && !(0, _has2["default"])(payload, 'wpos')) {
          payload.wpos = payload.wpos || {};
          (0, _each2["default"])(payload.mpos, function (mpos, axis) {
            var digits = (0, _decimalPlaces["default"])(mpos);
            var wco = (0, _get2["default"])(payload.wco || _this2.state.status.wco, axis, 0);
            payload.wpos[axis] = (Number(mpos) - Number(wco)).toFixed(digits);
          });
        } else if ((0, _has2["default"])(payload, 'wpos') && !(0, _has2["default"])(payload, 'mpos')) {
          payload.mpos = payload.mpos || {};
          (0, _each2["default"])(payload.wpos, function (wpos, axis) {
            var digits = (0, _decimalPlaces["default"])(wpos);
            var wco = (0, _get2["default"])(payload.wco || _this2.state.status.wco, axis, 0);
            payload.mpos[axis] = (Number(wpos) + Number(wco)).toFixed(digits);
          });
        }

        var nextState = _objectSpread(_objectSpread({}, this.state), {}, {
          status: _objectSpread(_objectSpread({}, this.state.status), payload)
        }); // Delete the raw key


        delete nextState.status.raw;

        if (!(0, _isEqual2["default"])(this.state.status, nextState.status)) {
          this.state = nextState; // enforce change
        }

        this.emit('status', payload);
        return;
      }

      if (type === _GrblLineParserResultOk["default"]) {
        this.emit('ok', payload);
        return;
      }

      if (type === _GrblLineParserResultError["default"]) {
        // https://nodejs.org/api/events.html#events_error_events
        // As a best practice, listeners should always be added for the 'error' events.
        this.emit('error', payload);
        return;
      }

      if (type === _GrblLineParserResultAlarm["default"]) {
        this.emit('alarm', payload);
        return;
      }

      if (type === _GrblLineParserResultParserState["default"]) {
        var modal = payload.modal,
            tool = payload.tool,
            feedrate = payload.feedrate,
            spindle = payload.spindle;

        var _nextState = _objectSpread(_objectSpread({}, this.state), {}, {
          parserstate: {
            modal: modal,
            tool: tool,
            feedrate: feedrate,
            spindle: spindle
          }
        });

        if (!(0, _isEqual2["default"])(this.state.parserstate, _nextState.parserstate)) {
          this.state = _nextState; // enforce change
        }

        this.emit('parserstate', payload);
        return;
      }

      if (type === _GrblLineParserResultParameters["default"]) {
        var name = payload.name,
            value = payload.value;

        var nextSettings = _objectSpread(_objectSpread({}, this.settings), {}, {
          parameters: _objectSpread(_objectSpread({}, this.settings.parameters), {}, _defineProperty({}, name, value))
        });

        if (!(0, _isEqual2["default"])(this.settings.parameters[name], nextSettings.parameters[name])) {
          this.settings = nextSettings; // enforce change
        }

        this.emit('parameters', payload);
        return;
      }

      if (type === _GrblLineParserResultFeedback["default"]) {
        this.emit('feedback', payload);
        return;
      }

      if (type === _GrblLineParserResultSettings["default"]) {
        var _name = payload.name,
            _value = payload.value;

        var _nextSettings = _objectSpread(_objectSpread({}, this.settings), {}, {
          settings: _objectSpread(_objectSpread({}, this.settings.settings), {}, _defineProperty({}, _name, _value))
        });

        if (this.settings.settings[_name] !== _nextSettings.settings[_name]) {
          this.settings = _nextSettings; // enforce change
        }

        this.emit('settings', payload);
        return;
      }

      if (type === _GrblLineParserResultStartup["default"]) {
        var version = payload.version;

        var _nextSettings2 = _objectSpread(_objectSpread({}, this.settings), {}, {
          version: version
        });

        if (!(0, _isEqual2["default"])(this.settings.version, _nextSettings2.version)) {
          this.settings = _nextSettings2; // enforce change
        }

        this.emit('startup', payload);
        return;
      }

      if (data.length > 0) {
        this.emit('others', payload);
        return;
      }
    }
  }, {
    key: "getMachinePosition",
    value: function getMachinePosition() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return (0, _get2["default"])(state, 'status.mpos', {});
    }
  }, {
    key: "getWorkPosition",
    value: function getWorkPosition() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return (0, _get2["default"])(state, 'status.wpos', {});
    }
  }, {
    key: "getModalGroup",
    value: function getModalGroup() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return (0, _get2["default"])(state, 'parserstate.modal', {});
    }
  }, {
    key: "getTool",
    value: function getTool() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;
      return Number((0, _get2["default"])(state, 'parserstate.tool')) || 0;
    }
  }, {
    key: "getParameters",
    value: function getParameters() {
      return (0, _get2["default"])(this.settings, 'parameters', {});
    }
  }, {
    key: "isAlarm",
    value: function isAlarm() {
      var activeState = (0, _get2["default"])(this.state, 'status.activeState');
      return activeState === _constants.GRBL_ACTIVE_STATE_ALARM;
    }
  }, {
    key: "isIdle",
    value: function isIdle() {
      var activeState = (0, _get2["default"])(this.state, 'status.activeState');
      return activeState === _constants.GRBL_ACTIVE_STATE_IDLE;
    }
  }]);

  return GrblRunner;
}(_events["default"].EventEmitter);

var _default = GrblRunner;
exports["default"] = _default;