"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _events = _interopRequireDefault(require("events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Feeder = /*#__PURE__*/function (_events$EventEmitter) {
  _inherits(Feeder, _events$EventEmitter);

  var _super = _createSuper(Feeder);

  // @param {object} [options] The options object.
  // @param {function} [options.dataFilter] A function to be used to handle the data. The function accepts two arguments: The data to be sent to the controller, and the context.
  function Feeder(options) {
    var _this;

    _classCallCheck(this, Feeder);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "state", {
      hold: false,
      holdReason: null,
      queue: [],
      pending: false,
      changed: false
    });

    _defineProperty(_assertThisInitialized(_this), "dataFilter", null);

    if (typeof options.dataFilter === 'function') {
      _this.dataFilter = options.dataFilter;
    }

    _this.on('change', function () {
      _this.state.changed = true;
    });

    return _this;
  }

  _createClass(Feeder, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        hold: this.state.hold,
        holdReason: this.state.holdReason,
        queue: this.state.queue.length,
        pending: this.state.pending,
        changed: this.state.changed
      };
    }
  }, {
    key: "feed",
    value: function feed() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // Clear pending state when the feeder queue is empty
      if (this.state.queue.length === 0) {
        this.state.pending = false;
      }

      data = [].concat(data);

      if (data.length > 0) {
        this.state.queue = this.state.queue.concat(data.map(function (command) {
          return {
            command: command,
            context: context
          };
        }));
        this.emit('change');
      }
    }
  }, {
    key: "hold",
    value: function hold(reason) {
      if (this.state.hold) {
        return;
      }

      this.state.hold = true;
      this.state.holdReason = reason;
      this.emit('hold');
      this.emit('change');
    }
  }, {
    key: "unhold",
    value: function unhold() {
      if (!this.state.hold) {
        return;
      }

      this.state.hold = false;
      this.state.holdReason = null;
      this.emit('unhold');
      this.emit('change');
    }
  }, {
    key: "clear",
    value: function clear() {
      this.state.queue = [];
      this.state.pending = false;
      this.emit('change');
    }
  }, {
    key: "reset",
    value: function reset() {
      this.state.hold = false;
      this.state.holdReason = null;
      this.state.queue = [];
      this.state.pending = false;
      this.emit('change');
    }
  }, {
    key: "size",
    value: function size() {
      return this.state.queue.length;
    }
  }, {
    key: "next",
    value: function next() {
      while (!this.state.hold && this.state.queue.length > 0) {
        var _this$state$queue$shi = this.state.queue.shift(),
            command = _this$state$queue$shi.command,
            context = _this$state$queue$shi.context;

        if (this.dataFilter) {
          command = this.dataFilter(command, context) || '';

          if (!command) {
            // Ignore blank lines
            continue;
          }
        }

        this.state.pending = true;
        this.emit('data', command, context);
        this.emit('change');
        break;
      } // Clear pending state when the feeder queue is empty


      if (this.state.queue.length === 0) {
        this.state.pending = false;
      }

      return this.state.pending;
    }
  }, {
    key: "isPending",
    value: function isPending() {
      return this.state.pending;
    } // Returns true if any state have changes

  }, {
    key: "peek",
    value: function peek() {
      var changed = this.state.changed;
      this.state.changed = false;
      return changed;
    }
  }]);

  return Feeder;
}(_events["default"].EventEmitter);

var _default = Feeder;
exports["default"] = _default;