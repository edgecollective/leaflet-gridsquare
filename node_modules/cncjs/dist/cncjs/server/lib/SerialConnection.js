"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toIdent = exports["default"] = void 0;

var _events = require("events");

var _serialport = _interopRequireDefault(require("serialport"));

var _excluded = ["writeFilter"],
    _excluded2 = ["path"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Readline = _serialport["default"].parsers.Readline; // Validation

var DATABITS = Object.freeze([5, 6, 7, 8]);
var STOPBITS = Object.freeze([1, 2]);
var PARITY = Object.freeze(['none', 'even', 'mark', 'odd', 'space']);
var FLOWCONTROLS = Object.freeze(['rtscts', 'xon', 'xoff', 'xany']);
var defaultSettings = Object.freeze({
  baudRate: 115200,
  dataBits: 8,
  stopBits: 1,
  parity: 'none',
  rtscts: false,
  xon: false,
  xoff: false,
  xany: false
});

var toIdent = function toIdent(options) {
  // Only the path option is required for generating the ident property
  var _options = _objectSpread({}, options),
      path = _options.path;

  return JSON.stringify({
    type: 'serial',
    path: path
  });
};

exports.toIdent = toIdent;

var SerialConnection = /*#__PURE__*/function (_EventEmitter) {
  _inherits(SerialConnection, _EventEmitter);

  var _super = _createSuper(SerialConnection);

  // Readline parser
  // SerialPort
  function SerialConnection(options) {
    var _this;

    _classCallCheck(this, SerialConnection);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "type", 'serial');

    _defineProperty(_assertThisInitialized(_this), "parser", null);

    _defineProperty(_assertThisInitialized(_this), "port", null);

    _defineProperty(_assertThisInitialized(_this), "writeFilter", function (data) {
      return data;
    });

    _defineProperty(_assertThisInitialized(_this), "eventListener", {
      data: function data(_data) {
        _this.emit('data', _data);
      },
      open: function open() {
        _this.emit('open');
      },
      close: function close(err) {
        _this.emit('close', err);
      },
      error: function error(err) {
        _this.emit('error', err);
      }
    });

    var _options2 = _objectSpread({}, options),
        writeFilter = _options2.writeFilter,
        rest = _objectWithoutProperties(_options2, _excluded);

    if (writeFilter) {
      if (typeof writeFilter !== 'function') {
        throw new TypeError("\"writeFilter\" must be a function: ".concat(writeFilter));
      }

      _this.writeFilter = writeFilter;
    }

    var settings = Object.assign({}, defaultSettings, rest);

    if (settings.port) {
      throw new TypeError('"port" is an unknown option, did you mean "path"?');
    }

    if (!settings.path) {
      throw new TypeError("\"path\" is not defined: ".concat(settings.path));
    }

    if (settings.baudrate) {
      throw new TypeError('"baudrate" is an unknown option, did you mean "baudRate"?');
    }

    if (typeof settings.baudRate !== 'number') {
      throw new TypeError("\"baudRate\" must be a number: ".concat(settings.baudRate));
    }

    if (DATABITS.indexOf(settings.dataBits) < 0) {
      throw new TypeError("\"databits\" is invalid: ".concat(settings.dataBits));
    }

    if (STOPBITS.indexOf(settings.stopBits) < 0) {
      throw new TypeError("\"stopbits\" is invalid: ".concat(settings.stopbits));
    }

    if (PARITY.indexOf(settings.parity) < 0) {
      throw new TypeError("\"parity\" is invalid: ".concat(settings.parity));
    }

    FLOWCONTROLS.forEach(function (control) {
      if (typeof settings[control] !== 'boolean') {
        throw new TypeError("\"".concat(control, "\" is not boolean: ").concat(settings[control]));
      }
    });
    Object.defineProperties(_assertThisInitialized(_this), {
      settings: {
        enumerable: true,
        value: settings,
        writable: false
      }
    });
    return _this;
  }

  _createClass(SerialConnection, [{
    key: "ident",
    get: function get() {
      return toIdent(this.settings);
    }
  }, {
    key: "isOpen",
    get: function get() {
      return this.port && this.port.isOpen;
    }
  }, {
    key: "isClose",
    get: function get() {
      return !this.isOpen;
    } // @param {function} callback The error-first callback.

  }, {
    key: "open",
    value: function open(callback) {
      if (this.port) {
        var err = new Error("Cannot open serial port \"".concat(this.settings.path, "\""));
        callback(err);
        return;
      }

      var _this$settings = this.settings,
          path = _this$settings.path,
          rest = _objectWithoutProperties(_this$settings, _excluded2);

      this.port = new _serialport["default"](path, _objectSpread(_objectSpread({}, rest), {}, {
        autoOpen: false
      }));
      this.port.on('open', this.eventListener.open);
      this.port.on('close', this.eventListener.close);
      this.port.on('error', this.eventListener.error);
      this.parser = this.port.pipe(new Readline({
        delimiter: '\n'
      }));
      this.parser.on('data', this.eventListener.data);
      this.port.open(callback);
    } // @param {function} callback The error-first callback.

  }, {
    key: "close",
    value: function close(callback) {
      if (!this.port) {
        var err = new Error("Cannot close serial port \"".concat(this.settings.path, "\""));
        callback && callback(err);
        return;
      }

      this.port.removeListener('open', this.eventListener.open);
      this.port.removeListener('close', this.eventListener.close);
      this.port.removeListener('error', this.eventListener.error);
      this.parser.removeListener('data', this.eventListener.data);
      this.port.close(callback);
      this.port = null;
      this.parser = null;
    }
  }, {
    key: "write",
    value: function write(data, context) {
      if (!this.port) {
        return;
      }

      data = this.writeFilter(data, context);
      this.port.write(data);
    }
  }]);

  return SerialConnection;
}(_events.EventEmitter);

var _default = SerialConnection;
exports["default"] = _default;