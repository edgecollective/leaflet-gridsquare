"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = exports.signin = exports.read = exports.fetch = exports.create = exports.__delete = void 0;

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _bcryptNodejs = _interopRequireDefault(require("bcrypt-nodejs"));

var _ensureArray = _interopRequireDefault(require("ensure-array"));

var _isPlainObject = _interopRequireDefault(require("lodash/isPlainObject"));

var _find = _interopRequireDefault(require("lodash/find"));

var _some = _interopRequireDefault(require("lodash/some"));

var _uuid = _interopRequireDefault(require("uuid"));

var _settings = _interopRequireDefault(require("../config/settings"));

var _logger = _interopRequireDefault(require("../lib/logger"));

var _configstore = _interopRequireDefault(require("../services/configstore"));

var _paging = require("./paging");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var log = (0, _logger["default"])('api:users');
var CONFIG_KEY = 'users'; // Generate access token
// https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback
// Note. Do not use password and other sensitive fields in the payload

var generateAccessToken = function generateAccessToken(payload) {
  var secret = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _settings["default"].secret;

  var token = _jsonwebtoken["default"].sign(payload, secret, {
    expiresIn: _settings["default"].accessTokenLifetime
  });

  return token;
};

var getSanitizedRecords = function getSanitizedRecords() {
  var records = (0, _ensureArray["default"])(_configstore["default"].get(CONFIG_KEY, []));
  var shouldUpdate = false;

  for (var i = 0; i < records.length; ++i) {
    if (!(0, _isPlainObject["default"])(records[i])) {
      records[i] = {};
    }

    var record = records[i];

    if (!record.id) {
      record.id = _uuid["default"].v4();
      shouldUpdate = true;
    } // Defaults to true


    if (record.enabled === undefined) {
      record.enabled = true;
    }
  }

  if (shouldUpdate) {
    log.debug("update sanitized records: ".concat(JSON.stringify(records))); // Pass `{ silent changes }` will suppress the change event

    _configstore["default"].set(CONFIG_KEY, records, {
      silent: true
    });
  }

  return records;
};

var signin = function signin(req, res) {
  var _req$body = _objectSpread({}, req.body),
      _req$body$token = _req$body.token,
      token = _req$body$token === void 0 ? '' : _req$body$token,
      _req$body$name = _req$body.name,
      name = _req$body$name === void 0 ? '' : _req$body$name,
      _req$body$password = _req$body.password,
      password = _req$body$password === void 0 ? '' : _req$body$password;

  var users = getSanitizedRecords();
  var enabledUsers = users.filter(function (user) {
    return user.enabled;
  });

  if (enabledUsers.length === 0) {
    var user = {
      id: '',
      name: ''
    };

    var payload = _objectSpread({}, user);

    var _token = generateAccessToken(payload, _settings["default"].secret); // generate access token


    res.send({
      enabled: false,
      // session is disabled
      token: _token,
      name: user.name // empty name

    });
    return;
  }

  if (!token) {
    var _user = (0, _find["default"])(enabledUsers, {
      name: name
    });

    var valid = _user && _bcryptNodejs["default"].compareSync(password, _user.password);

    if (!valid) {
      res.status(_constants.ERR_UNAUTHORIZED).send({
        msg: 'Authentication failed'
      });
      return;
    }

    var _payload = {
      id: _user.id,
      name: _user.name
    };

    var _token2 = generateAccessToken(_payload, _settings["default"].secret); // generate access token


    res.send({
      enabled: true,
      // session is enabled
      token: _token2,
      // new token
      name: _user.name
    });
    return;
  }

  _jsonwebtoken["default"].verify(token, _settings["default"].secret, function (err, user) {
    if (err) {
      res.status(_constants.ERR_INTERNAL_SERVER_ERROR).send({
        msg: 'Internal server error'
      });
      return;
    }

    var iat = new Date(user.iat * 1000).toISOString();
    var exp = new Date(user.exp * 1000).toISOString();
    log.debug("jwt.verify: user.id=".concat(user.id, ", user.name=").concat(user.name, ", user.iat=").concat(iat, ", user.exp=").concat(exp));
    user = (0, _find["default"])(enabledUsers, {
      id: user.id,
      name: user.name
    });

    if (!user) {
      res.status(_constants.ERR_UNAUTHORIZED).send({
        msg: 'Authentication failed'
      });
      return;
    }

    res.send({
      enabled: true,
      // session is enabled
      token: token,
      // old token
      name: user.name
    });
  });
};

exports.signin = signin;

var fetch = function fetch(req, res) {
  var records = getSanitizedRecords();
  var paging = !!req.query.paging;

  if (paging) {
    var _req$query = req.query,
        _req$query$page = _req$query.page,
        page = _req$query$page === void 0 ? 1 : _req$query$page,
        _req$query$pageLength = _req$query.pageLength,
        pageLength = _req$query$pageLength === void 0 ? 10 : _req$query$pageLength;
    var totalRecords = records.length;

    var _getPagingRange = (0, _paging.getPagingRange)({
      page: page,
      pageLength: pageLength,
      totalRecords: totalRecords
    }),
        _getPagingRange2 = _slicedToArray(_getPagingRange, 2),
        begin = _getPagingRange2[0],
        end = _getPagingRange2[1];

    var pagedRecords = records.slice(begin, end);
    res.send({
      pagination: {
        page: Number(page),
        pageLength: Number(pageLength),
        totalRecords: Number(totalRecords)
      },
      records: pagedRecords.map(function (record) {
        var _record = _objectSpread({}, record),
            id = _record.id,
            mtime = _record.mtime,
            enabled = _record.enabled,
            name = _record.name;

        return {
          id: id,
          mtime: mtime,
          enabled: enabled,
          name: name
        };
      })
    });
  } else {
    res.send({
      records: records.map(function (record) {
        var _record2 = _objectSpread({}, record),
            id = _record2.id,
            mtime = _record2.mtime,
            enabled = _record2.enabled,
            name = _record2.name;

        return {
          id: id,
          mtime: mtime,
          enabled: enabled,
          name: name
        };
      })
    });
  }
};

exports.fetch = fetch;

var create = function create(req, res) {
  var _req$body2 = _objectSpread({}, req.body),
      _req$body2$enabled = _req$body2.enabled,
      enabled = _req$body2$enabled === void 0 ? true : _req$body2$enabled,
      _req$body2$name = _req$body2.name,
      name = _req$body2$name === void 0 ? '' : _req$body2$name,
      _req$body2$password = _req$body2.password,
      password = _req$body2$password === void 0 ? '' : _req$body2$password;

  if (!name) {
    res.status(_constants.ERR_BAD_REQUEST).send({
      msg: 'The "name" parameter must not be empty'
    });
    return;
  }

  if (!password) {
    res.status(_constants.ERR_BAD_REQUEST).send({
      msg: 'The "password" parameter must not be empty'
    });
    return;
  }

  var records = getSanitizedRecords();

  if ((0, _find["default"])(records, {
    name: name
  })) {
    res.status(_constants.ERR_CONFLICT).send({
      msg: 'The specified user already exists'
    });
    return;
  }

  try {
    var salt = _bcryptNodejs["default"].genSaltSync();

    var hash = _bcryptNodejs["default"].hashSync(password.trim(), salt);

    var _records = getSanitizedRecords();

    var record = {
      id: _uuid["default"].v4(),
      mtime: new Date().getTime(),
      enabled: enabled,
      name: name,
      password: hash
    };

    _records.push(record);

    _configstore["default"].set(CONFIG_KEY, _records);

    res.send({
      id: record.id,
      mtime: record.mtime
    });
  } catch (err) {
    res.status(_constants.ERR_INTERNAL_SERVER_ERROR).send({
      msg: 'Failed to save ' + JSON.stringify(_settings["default"].rcfile)
    });
  }
};

exports.create = create;

var read = function read(req, res) {
  var id = req.params.id;
  var records = getSanitizedRecords();
  var record = (0, _find["default"])(records, {
    id: id
  });

  if (!record) {
    res.status(_constants.ERR_NOT_FOUND).send({
      msg: 'Not found'
    });
    return;
  }

  var _record3 = _objectSpread({}, record),
      mtime = _record3.mtime,
      enabled = _record3.enabled,
      name = _record3.name;

  res.send({
    id: id,
    mtime: mtime,
    enabled: enabled,
    name: name
  });
};

exports.read = read;

var update = function update(req, res) {
  var id = req.params.id;
  var records = getSanitizedRecords();
  var record = (0, _find["default"])(records, {
    id: id
  });

  if (!record) {
    res.status(_constants.ERR_NOT_FOUND).send({
      msg: 'Not found'
    });
    return;
  }

  var _req$body3 = _objectSpread({}, req.body),
      _req$body3$enabled = _req$body3.enabled,
      enabled = _req$body3$enabled === void 0 ? record.enabled : _req$body3$enabled,
      _req$body3$name = _req$body3.name,
      name = _req$body3$name === void 0 ? record.name : _req$body3$name,
      _req$body3$oldPasswor = _req$body3.oldPassword,
      oldPassword = _req$body3$oldPasswor === void 0 ? '' : _req$body3$oldPasswor,
      _req$body3$newPasswor = _req$body3.newPassword,
      newPassword = _req$body3$newPasswor === void 0 ? '' : _req$body3$newPasswor;

  var willChangePassword = oldPassword && newPassword; // Skip validation for "enabled" and "name"

  if (willChangePassword && !_bcryptNodejs["default"].compareSync(oldPassword, record.password)) {
    res.status(_constants.ERR_PRECONDITION_FAILED).send({
      msg: 'Incorrect password'
    });
    return;
  }

  var inuse = function inuse(record) {
    return record.id !== id && record.name === name;
  };

  if ((0, _some["default"])(records, inuse)) {
    res.status(_constants.ERR_CONFLICT).send({
      msg: 'The specified user already exists'
    });
    return;
  }

  try {
    record.mtime = new Date().getTime();
    record.enabled = Boolean(enabled);
    record.name = String(name || '');

    if (willChangePassword) {
      var salt = _bcryptNodejs["default"].genSaltSync();

      var hash = _bcryptNodejs["default"].hashSync(newPassword.trim(), salt);

      record.password = hash;
    }

    _configstore["default"].set(CONFIG_KEY, records);

    res.send({
      id: record.id,
      mtime: record.mtime
    });
  } catch (err) {
    res.status(_constants.ERR_INTERNAL_SERVER_ERROR).send({
      msg: 'Failed to save ' + JSON.stringify(_settings["default"].rcfile)
    });
  }
};

exports.update = update;

var __delete = function __delete(req, res) {
  var id = req.params.id;
  var records = getSanitizedRecords();
  var record = (0, _find["default"])(records, {
    id: id
  });

  if (!record) {
    res.status(_constants.ERR_NOT_FOUND).send({
      msg: 'Not found'
    });
    return;
  }

  try {
    var filteredRecords = records.filter(function (record) {
      return record.id !== id;
    });

    _configstore["default"].set(CONFIG_KEY, filteredRecords);

    res.send({
      id: record.id
    });
  } catch (err) {
    res.status(_constants.ERR_INTERNAL_SERVER_ERROR).send({
      msg: 'Failed to save ' + JSON.stringify(_settings["default"].rcfile)
    });
  }
};

exports.__delete = __delete;