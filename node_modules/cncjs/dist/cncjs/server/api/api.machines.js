"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = exports.read = exports.fetch = exports.create = exports.__delete = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _set2 = _interopRequireDefault(require("lodash/set"));

var _find2 = _interopRequireDefault(require("lodash/find"));

var _castArray2 = _interopRequireDefault(require("lodash/castArray"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _uuid = _interopRequireDefault(require("uuid"));

var _settings = _interopRequireDefault(require("../config/settings"));

var _ensureType = require("../lib/ensure-type");

var _logger = _interopRequireDefault(require("../lib/logger"));

var _configstore = _interopRequireDefault(require("../services/configstore"));

var _paging = require("./paging");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var log = (0, _logger["default"])('api:machines');
var CONFIG_KEY = 'machines';

var getSanitizedRecords = function getSanitizedRecords() {
  var records = (0, _castArray2["default"])(_configstore["default"].get(CONFIG_KEY, []));
  var shouldUpdate = false;

  for (var i = 0; i < records.length; ++i) {
    if (!(0, _isPlainObject2["default"])(records[i])) {
      records[i] = {};
    }

    var record = records[i];

    if (!record.id) {
      record.id = _uuid["default"].v4();
      shouldUpdate = true;
    }
  }

  if (shouldUpdate) {
    log.debug("update sanitized records: ".concat(JSON.stringify(records))); // Pass `{ silent changes }` will suppress the change event

    _configstore["default"].set(CONFIG_KEY, records, {
      silent: true
    });
  }

  return records;
};

var ensureMachineProfile = function ensureMachineProfile(payload) {
  var _payload = _objectSpread({}, payload),
      id = _payload.id,
      name = _payload.name,
      limits = _payload.limits;

  var _limits = _objectSpread({}, limits),
      _limits$xmin = _limits.xmin,
      xmin = _limits$xmin === void 0 ? 0 : _limits$xmin,
      _limits$xmax = _limits.xmax,
      xmax = _limits$xmax === void 0 ? 0 : _limits$xmax,
      _limits$ymin = _limits.ymin,
      ymin = _limits$ymin === void 0 ? 0 : _limits$ymin,
      _limits$ymax = _limits.ymax,
      ymax = _limits$ymax === void 0 ? 0 : _limits$ymax,
      _limits$zmin = _limits.zmin,
      zmin = _limits$zmin === void 0 ? 0 : _limits$zmin,
      _limits$zmax = _limits.zmax,
      zmax = _limits$zmax === void 0 ? 0 : _limits$zmax;

  return {
    id: id,
    name: (0, _ensureType.ensureString)(name),
    limits: {
      xmin: (0, _ensureType.ensureNumber)(xmin) || 0,
      xmax: (0, _ensureType.ensureNumber)(xmax) || 0,
      ymin: (0, _ensureType.ensureNumber)(ymin) || 0,
      ymax: (0, _ensureType.ensureNumber)(ymax) || 0,
      zmin: (0, _ensureType.ensureNumber)(zmin) || 0,
      zmax: (0, _ensureType.ensureNumber)(zmax) || 0
    }
  };
};

var fetch = function fetch(req, res) {
  var records = getSanitizedRecords();
  var paging = !!req.query.paging;

  if (paging) {
    var _req$query = req.query,
        _req$query$page = _req$query.page,
        page = _req$query$page === void 0 ? 1 : _req$query$page,
        _req$query$pageLength = _req$query.pageLength,
        pageLength = _req$query$pageLength === void 0 ? 10 : _req$query$pageLength;
    var totalRecords = records.length;

    var _getPagingRange = (0, _paging.getPagingRange)({
      page: page,
      pageLength: pageLength,
      totalRecords: totalRecords
    }),
        _getPagingRange2 = _slicedToArray(_getPagingRange, 2),
        begin = _getPagingRange2[0],
        end = _getPagingRange2[1];

    var pagedRecords = records.slice(begin, end);
    res.send({
      pagination: {
        page: Number(page),
        pageLength: Number(pageLength),
        totalRecords: Number(totalRecords)
      },
      records: pagedRecords.map(function (record) {
        return ensureMachineProfile(record);
      })
    });
  } else {
    res.send({
      records: records.map(function (record) {
        return ensureMachineProfile(record);
      })
    });
  }
};

exports.fetch = fetch;

var create = function create(req, res) {
  var record = _objectSpread({}, req.body);

  if (!record.name) {
    res.status(_constants.ERR_BAD_REQUEST).send({
      msg: 'The "name" parameter must not be empty'
    });
    return;
  }

  try {
    var records = getSanitizedRecords();
    records.push(ensureMachineProfile(record));

    _configstore["default"].set(CONFIG_KEY, records);

    res.send({
      id: record.id
    });
  } catch (err) {
    res.status(_constants.ERR_INTERNAL_SERVER_ERROR).send({
      msg: 'Failed to save ' + JSON.stringify(_settings["default"].rcfile)
    });
  }
};

exports.create = create;

var read = function read(req, res) {
  var id = req.params.id;
  var records = getSanitizedRecords();
  var record = (0, _find2["default"])(records, {
    id: id
  });

  if (!record) {
    res.status(_constants.ERR_NOT_FOUND).send({
      msg: 'Not found'
    });
    return;
  }

  res.send(ensureMachineProfile(record));
};

exports.read = read;

var update = function update(req, res) {
  var id = req.params.id;
  var records = getSanitizedRecords();
  var record = (0, _find2["default"])(records, {
    id: id
  });

  if (!record) {
    res.status(_constants.ERR_NOT_FOUND).send({
      msg: 'Not found'
    });
    return;
  }

  try {
    var nextRecord = req.body;
    [// [key, ensureType]
    ['name', _ensureType.ensureString], ['limits.xmin', _ensureType.ensureNumber], ['limits.xmax', _ensureType.ensureNumber], ['limits.ymin', _ensureType.ensureNumber], ['limits.ymax', _ensureType.ensureNumber], ['limits.zmin', _ensureType.ensureNumber], ['limits.zmax', _ensureType.ensureNumber]].forEach(function (it) {
      var _it = _slicedToArray(it, 2),
          key = _it[0],
          ensureType = _it[1];

      var defaultValue = (0, _get2["default"])(record, key);
      var value = (0, _get2["default"])(nextRecord, key, defaultValue);
      (0, _set2["default"])(record, key, typeof ensureType === 'function' ? ensureType(value) : value);
    });

    _configstore["default"].set(CONFIG_KEY, records);

    res.send({
      id: record.id
    });
  } catch (err) {
    res.status(_constants.ERR_INTERNAL_SERVER_ERROR).send({
      msg: 'Failed to save ' + JSON.stringify(_settings["default"].rcfile)
    });
  }
};

exports.update = update;

var __delete = function __delete(req, res) {
  var id = req.params.id;
  var records = getSanitizedRecords();
  var record = (0, _find2["default"])(records, {
    id: id
  });

  if (!record) {
    res.status(_constants.ERR_NOT_FOUND).send({
      msg: 'Not found'
    });
    return;
  }

  try {
    var filteredRecords = records.filter(function (record) {
      return record.id !== id;
    });

    _configstore["default"].set(CONFIG_KEY, filteredRecords);

    res.send({
      id: record.id
    });
  } catch (err) {
    res.status(_constants.ERR_INTERNAL_SERVER_ERROR).send({
      msg: 'Failed to save ' + JSON.stringify(_settings["default"].rcfile)
    });
  }
};

exports.__delete = __delete;