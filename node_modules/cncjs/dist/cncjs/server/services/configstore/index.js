"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _unset2 = _interopRequireDefault(require("lodash/unset"));

var _set2 = _interopRequireDefault(require("lodash/set"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _has2 = _interopRequireDefault(require("lodash/has"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _events = _interopRequireDefault(require("events"));

var _fs = _interopRequireDefault(require("fs"));

var _chalk = _interopRequireDefault(require("chalk"));

var _logger = _interopRequireDefault(require("../../lib/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var log = (0, _logger["default"])('service:configstore');
var defaultState = {
  // default state
  checkForUpdates: true,
  controller: {
    exception: {
      ignoreErrors: false
    }
  }
};

var ConfigStore = /*#__PURE__*/function (_events$EventEmitter) {
  _inherits(ConfigStore, _events$EventEmitter);

  var _super = _createSuper(ConfigStore);

  function ConfigStore() {
    var _this;

    _classCallCheck(this, ConfigStore);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "file", '');

    _defineProperty(_assertThisInitialized(_this), "config", {});

    _defineProperty(_assertThisInitialized(_this), "watcher", null);

    return _this;
  }

  _createClass(ConfigStore, [{
    key: "load",
    value: // @param {string} file The path to a filename.
    // @return {object} The config object.
    function load(file) {
      var _this2 = this;

      this.file = file;
      this.reload();
      this.emit('load', this.config); // emit load event

      if (this.watcher) {
        // Stop watching for changes
        this.watcher.close();
        this.watcher = null;
      }

      try {
        if (!_fs["default"].existsSync(this.file)) {
          var content = JSON.stringify({});

          _fs["default"].writeFileSync(this.file, content, 'utf8');
        }

        this.watcher = _fs["default"].watch(this.file, function (eventType, filename) {
          log.debug("fs.watch(eventType='".concat(eventType, "', filename='").concat(filename, "')"));

          if (eventType === 'change') {
            log.debug("\"".concat(filename, "\" has been changed"));

            var ok = _this2.reload();

            ok && _this2.emit('change', _this2.config); // it is ok to emit change event
          }
        });
      } catch (err) {
        log.error(err);
        this.emit('error', err); // emit error event
      }

      return this.config;
    }
  }, {
    key: "reload",
    value: function reload() {
      try {
        if (_fs["default"].existsSync(this.file)) {
          this.config = JSON.parse(_fs["default"].readFileSync(this.file, 'utf8'));
        }
      } catch (err) {
        err.fileName = this.file;
        log.error("Unable to load data from ".concat(_chalk["default"].yellow(JSON.stringify(this.file)), ": err=").concat(err));
        this.emit('error', err); // emit error event

        return false;
      }

      if (!(0, _isPlainObject2["default"])(this.config)) {
        log.error("\"".concat(this.file, "\" does not contain valid JSON"));
        this.config = {};
      }

      this.config.state = _objectSpread(_objectSpread({}, defaultState), this.config.state);
      return true;
    }
  }, {
    key: "sync",
    value: function sync() {
      try {
        var content = JSON.stringify(this.config, null, 4);

        _fs["default"].writeFileSync(this.file, content, 'utf8');
      } catch (err) {
        log.error("Unable to write data to \"".concat(this.file, "\""));
        this.emit('error', err); // emit error event

        return false;
      }

      return true;
    }
  }, {
    key: "has",
    value: function has(key) {
      return (0, _has2["default"])(this.config, key);
    }
  }, {
    key: "get",
    value: function get(key, defaultValue) {
      if (!this.config) {
        this.reload();
      }

      return key !== undefined ? (0, _get2["default"])(this.config, key, defaultValue) : this.config;
    }
  }, {
    key: "set",
    value: function set(key, value, options) {
      var _options = _objectSpread({}, options),
          _options$silent = _options.silent,
          silent = _options$silent === void 0 ? false : _options$silent;

      if (key === undefined) {
        return;
      }

      var ok = this.reload(); // reload before making changes

      (0, _set2["default"])(this.config, key, value);
      ok && !silent && this.sync(); // it is ok to write
    }
  }, {
    key: "unset",
    value: function unset(key) {
      if (key === undefined) {
        return;
      }

      var ok = this.reload(); // reload before making changes

      (0, _unset2["default"])(this.config, key);
      ok && this.sync(); // it is ok to write
    }
  }]);

  return ConfigStore;
}(_events["default"].EventEmitter);

var configstore = new ConfigStore();
var _default = configstore;
exports["default"] = _default;