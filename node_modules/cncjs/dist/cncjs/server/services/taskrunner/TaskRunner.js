"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _events = _interopRequireDefault(require("events"));

var _spawnDefaultShell = _interopRequireDefault(require("spawn-default-shell"));

var _without = _interopRequireDefault(require("lodash/without"));

var _shortid = _interopRequireDefault(require("shortid"));

var _logger = _interopRequireDefault(require("../../lib/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var log = (0, _logger["default"])('service:taskrunner');

var TaskRunner = /*#__PURE__*/function (_events$EventEmitter) {
  _inherits(TaskRunner, _events$EventEmitter);

  var _super = _createSuper(TaskRunner);

  function TaskRunner() {
    var _this;

    _classCallCheck(this, TaskRunner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "tasks", []);

    return _this;
  }

  _createClass(TaskRunner, [{
    key: "run",
    value: function run(command, title, options) {
      var _this2 = this;

      if (options === undefined && _typeof(title) === 'object') {
        options = title;
        title = '';
      }

      var taskId = _shortid["default"].generate(); // task id


      var child = _spawnDefaultShell["default"].spawn(command, _objectSpread({
        detached: true
      }, options));

      child.unref();
      this.tasks.push(taskId);
      this.emit('start', taskId);
      child.stdout.on('data', function (data) {
        process.stdout.write("PID:".concat(child.pid, "> ").concat(data));
      });
      child.stderr.on('data', function (data) {
        process.stderr.write("PID:".concat(child.pid, "> ").concat(data));
      });
      child.on('error', function (err) {
        // Listen for error event can prevent from throwing an unhandled exception
        log.error("Failed to start a child process: err=".concat(JSON.stringify(err)));
        _this2.tasks = (0, _without["default"])(_this2.tasks, taskId);

        _this2.emit('error', taskId, err);
      }); // The 'exit' event is emitted after the child process ends.
      // Note that the 'exit' event may or may not fire after an error has occurred.
      // It is important to guard against accidentally invoking handler functions multiple times.

      child.on('exit', function (code) {
        if (_this2.contains(taskId)) {
          _this2.tasks = (0, _without["default"])(_this2.tasks, taskId);

          _this2.emit('finish', taskId, code);
        }
      });
      return taskId;
    }
  }, {
    key: "contains",
    value: function contains(taskId) {
      return this.tasks.indexOf(taskId) >= 0;
    }
  }]);

  return TaskRunner;
}(_events["default"].EventEmitter);

var _default = TaskRunner;
exports["default"] = _default;