"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _minimatch = _interopRequireDefault(require("minimatch"));

var _FSMonitor = _interopRequireDefault(require("./FSMonitor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var monitor = new _FSMonitor["default"]();

var start = function start(_ref) {
  var watchDirectory = _ref.watchDirectory;
  monitor.watch(watchDirectory);
};

var stop = function stop() {
  monitor.unwatch();
};

var getFiles = function getFiles(searchPath) {
  var root = monitor.root;
  var files = Object.keys(monitor.files);

  var pattern = _path["default"].join(root, searchPath, '*');

  if (!root || pattern.indexOf(root) !== 0) {
    return [];
  }

  return _minimatch["default"].match(files, pattern, {
    matchBase: true
  }).map(function (file) {
    var stat = monitor.files[file] || {};
    return {
      name: _path["default"].basename(file),
      type: function () {
        if (stat.isFile()) {
          return 'f';
        }

        if (stat.isDirectory()) {
          return 'd';
        }

        if (stat.isBlockDevice()) {
          return 'b';
        }

        if (stat.isCharacterDevice()) {
          return 'c';
        }

        if (stat.isSymbolicLink()) {
          return 'l';
        }

        if (stat.isFIFO()) {
          return 'p';
        }

        if (stat.isSocket()) {
          return 's';
        }

        return '';
      }(),
      size: stat.size,
      atime: stat.atime,
      mtime: stat.mtime,
      ctime: stat.ctime
    };
  });
};

var readFile = function readFile(file, callback) {
  var root = monitor.root;
  file = _path["default"].join(root, file);

  _fs["default"].readFile(file, 'utf8', callback);
};

var _default = {
  start: start,
  stop: stop,
  getFiles: getFiles,
  readFile: readFile
};
exports["default"] = _default;